// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package order

// AddOcoOrderReq struct for AddOcoOrderReq
type AddOcoOrderReq struct {
	// Client Order Id，The ClientOid field is a unique ID created by the user（we recommend using a UUID）, and can only contain numbers, letters, underscores （_）, and hyphens （-）. This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
	ClientOid string `json:"clientOid,omitempty"`
	// specify if the order is to 'buy' or 'sell'
	Side string `json:"side,omitempty"`
	// symbol
	Symbol string `json:"symbol,omitempty"`
	// Order placement remarks, length cannot exceed 20 characters (ASCII)
	Remark *string `json:"remark,omitempty"`
	// Specify price for order
	Price string `json:"price,omitempty"`
	// Specify quantity for order
	Size string `json:"size,omitempty"`
	// trigger price.
	StopPrice string `json:"stopPrice,omitempty"`
	// The limit order price after take-profit and stop-loss are triggered.
	LimitPrice string `json:"limitPrice,omitempty"`
	// Transaction Type, currently only supports TRADE (spot transactions), the default is TRADE
	TradeType *string `json:"tradeType,omitempty"`
}

// NewAddOcoOrderReq instantiates a new AddOcoOrderReq object
// This constructor will assign default values to properties that have it defined
func NewAddOcoOrderReq(clientOid string, side string, symbol string, price string, size string, stopPrice string, limitPrice string) *AddOcoOrderReq {
	this := AddOcoOrderReq{}
	this.ClientOid = clientOid
	this.Side = side
	this.Symbol = symbol
	this.Price = price
	this.Size = size
	this.StopPrice = stopPrice
	this.LimitPrice = limitPrice
	return &this
}

// NewAddOcoOrderReqWithDefaults instantiates a new AddOcoOrderReq object
// This constructor will only assign default values to properties that have it defined,
func NewAddOcoOrderReqWithDefaults() *AddOcoOrderReq {
	this := AddOcoOrderReq{}
	return &this
}

func (o *AddOcoOrderReq) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["clientOid"] = o.ClientOid
	toSerialize["side"] = o.Side
	toSerialize["symbol"] = o.Symbol
	toSerialize["remark"] = o.Remark
	toSerialize["price"] = o.Price
	toSerialize["size"] = o.Size
	toSerialize["stopPrice"] = o.StopPrice
	toSerialize["limitPrice"] = o.LimitPrice
	toSerialize["tradeType"] = o.TradeType
	return toSerialize
}

type AddOcoOrderReqBuilder struct {
	obj *AddOcoOrderReq
}

func NewAddOcoOrderReqBuilder() *AddOcoOrderReqBuilder {
	return &AddOcoOrderReqBuilder{obj: NewAddOcoOrderReqWithDefaults()}
}

// Client Order Id，The ClientOid field is a unique ID created by the user（we recommend using a UUID）, and can only contain numbers, letters, underscores （_）, and hyphens （-）. This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
func (builder *AddOcoOrderReqBuilder) SetClientOid(value string) *AddOcoOrderReqBuilder {
	builder.obj.ClientOid = value
	return builder
}

// specify if the order is to 'buy' or 'sell'
func (builder *AddOcoOrderReqBuilder) SetSide(value string) *AddOcoOrderReqBuilder {
	builder.obj.Side = value
	return builder
}

// symbol
func (builder *AddOcoOrderReqBuilder) SetSymbol(value string) *AddOcoOrderReqBuilder {
	builder.obj.Symbol = value
	return builder
}

// Order placement remarks, length cannot exceed 20 characters (ASCII)
func (builder *AddOcoOrderReqBuilder) SetRemark(value string) *AddOcoOrderReqBuilder {
	builder.obj.Remark = &value
	return builder
}

// Specify price for order
func (builder *AddOcoOrderReqBuilder) SetPrice(value string) *AddOcoOrderReqBuilder {
	builder.obj.Price = value
	return builder
}

// Specify quantity for order
func (builder *AddOcoOrderReqBuilder) SetSize(value string) *AddOcoOrderReqBuilder {
	builder.obj.Size = value
	return builder
}

// trigger price.
func (builder *AddOcoOrderReqBuilder) SetStopPrice(value string) *AddOcoOrderReqBuilder {
	builder.obj.StopPrice = value
	return builder
}

// The limit order price after take-profit and stop-loss are triggered.
func (builder *AddOcoOrderReqBuilder) SetLimitPrice(value string) *AddOcoOrderReqBuilder {
	builder.obj.LimitPrice = value
	return builder
}

// Transaction Type, currently only supports TRADE (spot transactions), the default is TRADE
func (builder *AddOcoOrderReqBuilder) SetTradeType(value string) *AddOcoOrderReqBuilder {
	builder.obj.TradeType = &value
	return builder
}

func (builder *AddOcoOrderReqBuilder) Build() *AddOcoOrderReq {
	return builder.obj
}
