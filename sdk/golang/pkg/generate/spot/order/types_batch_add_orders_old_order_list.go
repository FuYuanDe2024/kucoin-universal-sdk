// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package order

// BatchAddOrdersOldOrderList struct for BatchAddOrdersOldOrderList
type BatchAddOrdersOldOrderList struct {
	// Client Order Id，The ClientOid field is a unique ID created by the user（we recommend using a UUID）, and can only contain numbers, letters, underscores （_）, and hyphens （-）. This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
	ClientOid string `json:"clientOid,omitempty"`
	// specify if the order is to 'buy' or 'sell'
	Side string `json:"side,omitempty"`
	// symbol
	Symbol string `json:"symbol,omitempty"`
	// only limit (default is limit)
	Type *string `json:"type,omitempty"`
	// Order placement remarks, length cannot exceed 20 characters (ASCII)
	Remark *string `json:"remark,omitempty"`
	// [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into four strategies: CN, CO, CB , and DC
	Stp *string `json:"stp,omitempty"`
	// Specify price for order  When placing a limit order, the price must be based on priceIncrement for the trading pair. The price increment (priceIncrement) is the price precision for the trading pair. For example, for the BTC-USDT trading pair, the priceIncrement is 0.00001000. So the price for your orders cannot be less than 0.00001000 and must be a multiple of priceIncrement. Otherwise, the order will return an invalid priceIncrement error.
	Price string `json:"price,omitempty"`
	// Specify quantity for order  When **type** is limit, size refers to the amount of trading targets (the asset name written in front) for the trading pair. Teh Size must be based on the baseIncrement of the trading pair. The baseIncrement represents the precision for the trading pair. The size of an order must be a positive-integer multiple of baseIncrement and must be between baseMinSize and baseMaxSize.  When **type** is market, select one out of two: size or funds
	Size string `json:"size,omitempty"`
	// [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading
	TimeInForce *string `json:"timeInForce,omitempty"`
	// passive order labels, this is disabled when the order timing strategy is IOC or FOK
	PostOnly *bool `json:"postOnly,omitempty"`
	// Hidden or not (not shown in order book)
	Hidden *bool `json:"hidden,omitempty"`
	// Whether or not only visible portions of orders are shown in iceberg orders
	Iceberg *bool `json:"iceberg,omitempty"`
	// Maximum visible quantity in iceberg orders
	VisibleSize *string `json:"visibleSize,omitempty"`
	// Cancel after n seconds，the order timing strategy is GTT
	CancelAfter *int64 `json:"cancelAfter,omitempty"`
	// The type of trading : **TRADE**（Spot Trade）
	TradeType *string `json:"tradeType,omitempty"`
	// Either loss or entry. Requires stopPrice to be defined
	Stop *string `json:"stop,omitempty"`
	// Stop price, Need to be defined if stop is specified.
	StopPrice *string `json:"stopPrice,omitempty"`
}

// NewBatchAddOrdersOldOrderList instantiates a new BatchAddOrdersOldOrderList object
// This constructor will assign default values to properties that have it defined
func NewBatchAddOrdersOldOrderList(clientOid string, side string, symbol string, price string, size string) *BatchAddOrdersOldOrderList {
	this := BatchAddOrdersOldOrderList{}
	this.ClientOid = clientOid
	this.Side = side
	this.Symbol = symbol
	var Type_ string = "limit"
	this.Type = &Type_
	this.Price = price
	this.Size = size
	var timeInForce string = "GTC"
	this.TimeInForce = &timeInForce
	var postOnly bool = false
	this.PostOnly = &postOnly
	var hidden bool = false
	this.Hidden = &hidden
	var iceberg bool = false
	this.Iceberg = &iceberg
	var tradeType string = "TRADE"
	this.TradeType = &tradeType
	return &this
}

// NewBatchAddOrdersOldOrderListWithDefaults instantiates a new BatchAddOrdersOldOrderList object
// This constructor will only assign default values to properties that have it defined,
func NewBatchAddOrdersOldOrderListWithDefaults() *BatchAddOrdersOldOrderList {
	this := BatchAddOrdersOldOrderList{}
	var Type_ string = "limit"
	this.Type = &Type_
	var timeInForce string = "GTC"
	this.TimeInForce = &timeInForce
	var postOnly bool = false
	this.PostOnly = &postOnly
	var hidden bool = false
	this.Hidden = &hidden
	var iceberg bool = false
	this.Iceberg = &iceberg
	var tradeType string = "TRADE"
	this.TradeType = &tradeType
	return &this
}

func (o *BatchAddOrdersOldOrderList) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["clientOid"] = o.ClientOid
	toSerialize["side"] = o.Side
	toSerialize["symbol"] = o.Symbol
	toSerialize["type"] = o.Type
	toSerialize["remark"] = o.Remark
	toSerialize["stp"] = o.Stp
	toSerialize["price"] = o.Price
	toSerialize["size"] = o.Size
	toSerialize["timeInForce"] = o.TimeInForce
	toSerialize["postOnly"] = o.PostOnly
	toSerialize["hidden"] = o.Hidden
	toSerialize["iceberg"] = o.Iceberg
	toSerialize["visibleSize"] = o.VisibleSize
	toSerialize["cancelAfter"] = o.CancelAfter
	toSerialize["tradeType"] = o.TradeType
	toSerialize["stop"] = o.Stop
	toSerialize["stopPrice"] = o.StopPrice
	return toSerialize
}

type BatchAddOrdersOldOrderListBuilder struct {
	obj *BatchAddOrdersOldOrderList
}

func NewBatchAddOrdersOldOrderListBuilder() *BatchAddOrdersOldOrderListBuilder {
	return &BatchAddOrdersOldOrderListBuilder{obj: NewBatchAddOrdersOldOrderListWithDefaults()}
}

// Client Order Id，The ClientOid field is a unique ID created by the user（we recommend using a UUID）, and can only contain numbers, letters, underscores （_）, and hyphens （-）. This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
func (builder *BatchAddOrdersOldOrderListBuilder) SetClientOid(value string) *BatchAddOrdersOldOrderListBuilder {
	builder.obj.ClientOid = value
	return builder
}

// specify if the order is to 'buy' or 'sell'
func (builder *BatchAddOrdersOldOrderListBuilder) SetSide(value string) *BatchAddOrdersOldOrderListBuilder {
	builder.obj.Side = value
	return builder
}

// symbol
func (builder *BatchAddOrdersOldOrderListBuilder) SetSymbol(value string) *BatchAddOrdersOldOrderListBuilder {
	builder.obj.Symbol = value
	return builder
}

// only limit (default is limit)
func (builder *BatchAddOrdersOldOrderListBuilder) SetType(value string) *BatchAddOrdersOldOrderListBuilder {
	builder.obj.Type = &value
	return builder
}

// Order placement remarks, length cannot exceed 20 characters (ASCII)
func (builder *BatchAddOrdersOldOrderListBuilder) SetRemark(value string) *BatchAddOrdersOldOrderListBuilder {
	builder.obj.Remark = &value
	return builder
}

// [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into four strategies: CN, CO, CB , and DC
func (builder *BatchAddOrdersOldOrderListBuilder) SetStp(value string) *BatchAddOrdersOldOrderListBuilder {
	builder.obj.Stp = &value
	return builder
}

// Specify price for order  When placing a limit order, the price must be based on priceIncrement for the trading pair. The price increment (priceIncrement) is the price precision for the trading pair. For example, for the BTC-USDT trading pair, the priceIncrement is 0.00001000. So the price for your orders cannot be less than 0.00001000 and must be a multiple of priceIncrement. Otherwise, the order will return an invalid priceIncrement error.
func (builder *BatchAddOrdersOldOrderListBuilder) SetPrice(value string) *BatchAddOrdersOldOrderListBuilder {
	builder.obj.Price = value
	return builder
}

// Specify quantity for order  When **type** is limit, size refers to the amount of trading targets (the asset name written in front) for the trading pair. Teh Size must be based on the baseIncrement of the trading pair. The baseIncrement represents the precision for the trading pair. The size of an order must be a positive-integer multiple of baseIncrement and must be between baseMinSize and baseMaxSize.  When **type** is market, select one out of two: size or funds
func (builder *BatchAddOrdersOldOrderListBuilder) SetSize(value string) *BatchAddOrdersOldOrderListBuilder {
	builder.obj.Size = value
	return builder
}

// [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading
func (builder *BatchAddOrdersOldOrderListBuilder) SetTimeInForce(value string) *BatchAddOrdersOldOrderListBuilder {
	builder.obj.TimeInForce = &value
	return builder
}

// passive order labels, this is disabled when the order timing strategy is IOC or FOK
func (builder *BatchAddOrdersOldOrderListBuilder) SetPostOnly(value bool) *BatchAddOrdersOldOrderListBuilder {
	builder.obj.PostOnly = &value
	return builder
}

// Hidden or not (not shown in order book)
func (builder *BatchAddOrdersOldOrderListBuilder) SetHidden(value bool) *BatchAddOrdersOldOrderListBuilder {
	builder.obj.Hidden = &value
	return builder
}

// Whether or not only visible portions of orders are shown in iceberg orders
func (builder *BatchAddOrdersOldOrderListBuilder) SetIceberg(value bool) *BatchAddOrdersOldOrderListBuilder {
	builder.obj.Iceberg = &value
	return builder
}

// Maximum visible quantity in iceberg orders
func (builder *BatchAddOrdersOldOrderListBuilder) SetVisibleSize(value string) *BatchAddOrdersOldOrderListBuilder {
	builder.obj.VisibleSize = &value
	return builder
}

// Cancel after n seconds，the order timing strategy is GTT
func (builder *BatchAddOrdersOldOrderListBuilder) SetCancelAfter(value int64) *BatchAddOrdersOldOrderListBuilder {
	builder.obj.CancelAfter = &value
	return builder
}

// The type of trading : **TRADE**（Spot Trade）
func (builder *BatchAddOrdersOldOrderListBuilder) SetTradeType(value string) *BatchAddOrdersOldOrderListBuilder {
	builder.obj.TradeType = &value
	return builder
}

// Either loss or entry. Requires stopPrice to be defined
func (builder *BatchAddOrdersOldOrderListBuilder) SetStop(value string) *BatchAddOrdersOldOrderListBuilder {
	builder.obj.Stop = &value
	return builder
}

// Stop price, Need to be defined if stop is specified.
func (builder *BatchAddOrdersOldOrderListBuilder) SetStopPrice(value string) *BatchAddOrdersOldOrderListBuilder {
	builder.obj.StopPrice = &value
	return builder
}

func (builder *BatchAddOrdersOldOrderListBuilder) Build() *BatchAddOrdersOldOrderList {
	return builder.obj
}
