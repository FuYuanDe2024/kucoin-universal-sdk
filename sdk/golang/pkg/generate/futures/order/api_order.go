// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package order

import (
	"context"
	"github.com/Kucoin/kucoin-universal-sdk/sdk/golang/internal/interfaces"
)

type OrderAPI interface {

	// GetTradeHistory Get Trade History
	// Description: Get a list of recent fills. If you need to get your recent trade history with low latency, please query endpoint Get List of Orders Completed in 24h. The requested data is not real-time.
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | FUTURES |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 5       |
	// +---------------------+---------+
	GetTradeHistory(req *GetTradeHistoryReq, ctx context.Context) (*GetTradeHistoryResp, error)

	// GetOpenOrderValue Get Open Order Value
	// Description: You can query this endpoint to get the the total number and value of the all your active orders.
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | FUTURES |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 10      |
	// +---------------------+---------+
	GetOpenOrderValue(req *GetOpenOrderValueReq, ctx context.Context) (*GetOpenOrderValueResp, error)

	// GetOrderByClientOid Get Order By ClientOid
	// Description: Get a single order by client order id (including a stop order).
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | GENERAL |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 5       |
	// +---------------------+---------+
	GetOrderByClientOid(req *GetOrderByClientOidReq, ctx context.Context) (*GetOrderByClientOidResp, error)

	// CancelOrderByClientOid Cancel Order By ClientOid
	// Description: Cancel order by client defined orderId.
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | FUTURES |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 1       |
	// +---------------------+---------+
	CancelOrderByClientOid(req *CancelOrderByClientOidReq, ctx context.Context) (*CancelOrderByClientOidResp, error)

	// CancelAllOrdersV1 Cancel All Orders - V1
	// Description: Cancel all open orders (excluding stop orders). The response is a list of orderIDs of the canceled orders.
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | FUTURES |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 200     |
	// +---------------------+---------+
	// Deprecated
	CancelAllOrdersV1(req *CancelAllOrdersV1Req, ctx context.Context) (*CancelAllOrdersV1Resp, error)

	// GetOrderList Get Order List
	// Description: List your current orders.
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | FUTURES |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 2       |
	// +---------------------+---------+
	GetOrderList(req *GetOrderListReq, ctx context.Context) (*GetOrderListResp, error)

	// BatchCancelOrders Batch Cancel Orders
	// Description: Cancel a bach of orders by client defined orderId or system generated orderId
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | FUTURES |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 20      |
	// +---------------------+---------+
	BatchCancelOrders(req *BatchCancelOrdersReq, ctx context.Context) (*BatchCancelOrdersResp, error)

	// BatchAddOrders Batch Add Orders
	// Description: Place multiple order to the futures trading system, you can place two major types of orders: limit and market. Orders can only be placed if your account has sufficient funds. Once an order is placed, your funds will be put on hold for the duration of the order. The amount of funds on hold depends on the order type and parameters specified. You can place up to 20 orders at one time, including limit orders, market orders, and stop orders  Please be noted that the system would hold the fees from the orders entered the orderbook in advance.
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | FUTURES |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 20      |
	// +---------------------+---------+
	BatchAddOrders(req *BatchAddOrdersReq, ctx context.Context) (*BatchAddOrdersResp, error)

	// CancelOrderById Cancel Order By OrderId
	// Description: Cancel order by system generated orderId.
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | FUTURES |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 1       |
	// +---------------------+---------+
	CancelOrderById(req *CancelOrderByIdReq, ctx context.Context) (*CancelOrderByIdResp, error)

	// GetOrderByOrderId Get Order By OrderId
	// Description: Get a single order by order id (including a stop order).
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | GENERAL |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 5       |
	// +---------------------+---------+
	GetOrderByOrderId(req *GetOrderByOrderIdReq, ctx context.Context) (*GetOrderByOrderIdResp, error)

	// AddOrder Add Order
	// Description: Place order to the futures trading system, you can place two major types of orders: limit and market. Orders can only be placed if your account has sufficient funds. Once an order is placed, your funds will be put on hold for the duration of the order. The amount of funds on hold depends on the order type and parameters specified.
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | FUTURES |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 2       |
	// +---------------------+---------+
	AddOrder(req *AddOrderReq, ctx context.Context) (*AddOrderResp, error)

	// AddOrderTest Add Order Test
	// Description: Place order to the futures trading system just for validation
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | FUTURES |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 2       |
	// +---------------------+---------+
	AddOrderTest(req *AddOrderTestReq, ctx context.Context) (*AddOrderTestResp, error)

	// GetRecentClosedOrders Get Recent Closed Orders
	// Description: Get a list of recent 1000 closed orders in the last 24 hours.  If you need to get your recent traded order history with low latency, you may query this endpoint.
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | FUTURES |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 5       |
	// +---------------------+---------+
	GetRecentClosedOrders(req *GetRecentClosedOrdersReq, ctx context.Context) (*GetRecentClosedOrdersResp, error)

	// GetRecentTradeHistory Get Recent Trade History
	// Description: Get a list of recent 1000 fills in the last 24 hours. If you need to get your recent traded order history with low latency, you may query this endpoint.
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | FUTURES |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 3       |
	// +---------------------+---------+
	GetRecentTradeHistory(req *GetRecentTradeHistoryReq, ctx context.Context) (*GetRecentTradeHistoryResp, error)

	// AddTPSLOrder Add Take Profit And Stop Loss Order
	// Description: Place take profit and stop loss order supports both take-profit and stop-loss functions, and other functions are exactly the same as the place order interface.
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | FUTURES |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 2       |
	// +---------------------+---------+
	AddTPSLOrder(req *AddTPSLOrderReq, ctx context.Context) (*AddTPSLOrderResp, error)

	// CancelAllStopOrders Cancel All Stop orders
	// Description: Cancel all untriggered stop orders. The response is a list of orderIDs of the canceled stop orders. To cancel triggered stop orders, please use &#39;Cancel Multiple Futures Limit orders&#39;.
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | FUTURES |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 15      |
	// +---------------------+---------+
	CancelAllStopOrders(req *CancelAllStopOrdersReq, ctx context.Context) (*CancelAllStopOrdersResp, error)

	// GetStopOrderList Get Stop Order List
	// Description: Get the un-triggered stop orders list. Stop orders that have been triggered can be queried through the general order interface
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | FUTURES |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 6       |
	// +---------------------+---------+
	GetStopOrderList(req *GetStopOrderListReq, ctx context.Context) (*GetStopOrderListResp, error)

	// CancelAllOrdersV3 Cancel All Orders
	// Description: Cancel all open orders (excluding stop orders). The response is a list of orderIDs of the canceled orders.
	// +---------------------+---------+
	// | Extra API Info      | Value   |
	// +---------------------+---------+
	// | API-DOMAIN          | FUTURES |
	// | API-CHANNEL         | PRIVATE |
	// | API-PERMISSION      | FUTURES |
	// | API-RATE-LIMIT-POOL | FUTURES |
	// | API-RATE-LIMIT      | 30      |
	// +---------------------+---------+
	CancelAllOrdersV3(req *CancelAllOrdersV3Req, ctx context.Context) (*CancelAllOrdersV3Resp, error)
}

type OrderAPIImpl struct {
	transport interfaces.Transport
}

func NewOrderAPIImp(transport interfaces.Transport) *OrderAPIImpl {
	return &OrderAPIImpl{transport: transport}
}

func (impl *OrderAPIImpl) GetTradeHistory(req *GetTradeHistoryReq, ctx context.Context) (*GetTradeHistoryResp, error) {
	resp := &GetTradeHistoryResp{}
	err := impl.transport.Call(ctx, "futures", false, "Get", "/api/v1/fills", req, resp, false)
	return resp, err
}

func (impl *OrderAPIImpl) GetOpenOrderValue(req *GetOpenOrderValueReq, ctx context.Context) (*GetOpenOrderValueResp, error) {
	resp := &GetOpenOrderValueResp{}
	err := impl.transport.Call(ctx, "futures", false, "Get", "/api/v1/openOrderStatistics", req, resp, false)
	return resp, err
}

func (impl *OrderAPIImpl) GetOrderByClientOid(req *GetOrderByClientOidReq, ctx context.Context) (*GetOrderByClientOidResp, error) {
	resp := &GetOrderByClientOidResp{}
	err := impl.transport.Call(ctx, "futures", false, "Get", "/api/v1/orders/byClientOid", req, resp, false)
	return resp, err
}

func (impl *OrderAPIImpl) CancelOrderByClientOid(req *CancelOrderByClientOidReq, ctx context.Context) (*CancelOrderByClientOidResp, error) {
	resp := &CancelOrderByClientOidResp{}
	err := impl.transport.Call(ctx, "futures", false, "Delete", "/api/v1/orders/client-order/{clientOid}", req, resp, false)
	return resp, err
}

func (impl *OrderAPIImpl) CancelAllOrdersV1(req *CancelAllOrdersV1Req, ctx context.Context) (*CancelAllOrdersV1Resp, error) {
	resp := &CancelAllOrdersV1Resp{}
	err := impl.transport.Call(ctx, "futures", false, "Delete", "/api/v1/orders", req, resp, false)
	return resp, err
}

func (impl *OrderAPIImpl) GetOrderList(req *GetOrderListReq, ctx context.Context) (*GetOrderListResp, error) {
	resp := &GetOrderListResp{}
	err := impl.transport.Call(ctx, "futures", false, "Get", "/api/v1/orders", req, resp, false)
	return resp, err
}

func (impl *OrderAPIImpl) BatchCancelOrders(req *BatchCancelOrdersReq, ctx context.Context) (*BatchCancelOrdersResp, error) {
	resp := &BatchCancelOrdersResp{}
	err := impl.transport.Call(ctx, "futures", false, "Delete", "/api/v1/orders/multi-cancel", req, resp, true)
	return resp, err
}

func (impl *OrderAPIImpl) BatchAddOrders(req *BatchAddOrdersReq, ctx context.Context) (*BatchAddOrdersResp, error) {
	resp := &BatchAddOrdersResp{}
	err := impl.transport.Call(ctx, "futures", false, "Post", "/api/v1/orders/multi", req, resp, false)
	return resp, err
}

func (impl *OrderAPIImpl) CancelOrderById(req *CancelOrderByIdReq, ctx context.Context) (*CancelOrderByIdResp, error) {
	resp := &CancelOrderByIdResp{}
	err := impl.transport.Call(ctx, "futures", false, "Delete", "/api/v1/orders/{orderId}", req, resp, false)
	return resp, err
}

func (impl *OrderAPIImpl) GetOrderByOrderId(req *GetOrderByOrderIdReq, ctx context.Context) (*GetOrderByOrderIdResp, error) {
	resp := &GetOrderByOrderIdResp{}
	err := impl.transport.Call(ctx, "futures", false, "Get", "/api/v1/orders/{order-id}", req, resp, false)
	return resp, err
}

func (impl *OrderAPIImpl) AddOrder(req *AddOrderReq, ctx context.Context) (*AddOrderResp, error) {
	resp := &AddOrderResp{}
	err := impl.transport.Call(ctx, "futures", false, "Post", "/api/v1/orders", req, resp, false)
	return resp, err
}

func (impl *OrderAPIImpl) AddOrderTest(req *AddOrderTestReq, ctx context.Context) (*AddOrderTestResp, error) {
	resp := &AddOrderTestResp{}
	err := impl.transport.Call(ctx, "futures", false, "Post", "/api/v1/orders/test", req, resp, false)
	return resp, err
}

func (impl *OrderAPIImpl) GetRecentClosedOrders(req *GetRecentClosedOrdersReq, ctx context.Context) (*GetRecentClosedOrdersResp, error) {
	resp := &GetRecentClosedOrdersResp{}
	err := impl.transport.Call(ctx, "futures", false, "Get", "/api/v1/recentDoneOrders", req, resp, false)
	return resp, err
}

func (impl *OrderAPIImpl) GetRecentTradeHistory(req *GetRecentTradeHistoryReq, ctx context.Context) (*GetRecentTradeHistoryResp, error) {
	resp := &GetRecentTradeHistoryResp{}
	err := impl.transport.Call(ctx, "futures", false, "Get", "/api/v1/recentFills", req, resp, false)
	return resp, err
}

func (impl *OrderAPIImpl) AddTPSLOrder(req *AddTPSLOrderReq, ctx context.Context) (*AddTPSLOrderResp, error) {
	resp := &AddTPSLOrderResp{}
	err := impl.transport.Call(ctx, "futures", false, "Post", "/api/v1/st-orders", req, resp, false)
	return resp, err
}

func (impl *OrderAPIImpl) CancelAllStopOrders(req *CancelAllStopOrdersReq, ctx context.Context) (*CancelAllStopOrdersResp, error) {
	resp := &CancelAllStopOrdersResp{}
	err := impl.transport.Call(ctx, "futures", false, "Delete", "/api/v1/stopOrders", req, resp, false)
	return resp, err
}

func (impl *OrderAPIImpl) GetStopOrderList(req *GetStopOrderListReq, ctx context.Context) (*GetStopOrderListResp, error) {
	resp := &GetStopOrderListResp{}
	err := impl.transport.Call(ctx, "futures", false, "Get", "/api/v1/stopOrders", req, resp, false)
	return resp, err
}

func (impl *OrderAPIImpl) CancelAllOrdersV3(req *CancelAllOrdersV3Req, ctx context.Context) (*CancelAllOrdersV3Resp, error) {
	resp := &CancelAllOrdersV3Resp{}
	err := impl.transport.Call(ctx, "futures", false, "Delete", "/api/v3/orders", req, resp, false)
	return resp, err
}
