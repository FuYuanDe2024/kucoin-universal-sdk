// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToInstance } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';
export class AddOrderV1Req implements Serializable<AddOrderV1Req> {
    /**
     * Client Order Id，The ClientOid field is a unique ID created by the user（we recommend using a UUID）, and can only contain numbers, letters, underscores （_）, and hyphens （-）. This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
     */
    clientOid?: string;
    /**
     * specify if the order is to \'buy\' or \'sell\'
     */
    side?: AddOrderV1Req.SideEnum;
    /**
     * symbol
     */
    symbol?: string;
    /**
     * specify if the order is an \'limit\' order or \'market\' order.   The type of order you specify when you place your order determines whether or not you need to request other parameters and also affects the execution of the matching engine.  When placing a limit order, you must specify a price and size. The system will try to match the order according to market price or a price better than market price. If the order cannot be immediately matched, it will stay in the order book until it is matched or the user cancels.  Unlike limit orders, the price for market orders fluctuates with market prices. When placing a market order, you do not need to specify a price, you only need to specify a quantity. Market orders are filled immediately and will not enter the order book. All market orders are takers and a taker fee will be charged.
     */
    type?: AddOrderV1Req.TypeEnum = AddOrderV1Req.TypeEnum.LIMIT;
    /**
     * [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into four strategies: CN, CO, CB , and DC
     */
    stp?: AddOrderV1Req.StpEnum;
    /**
     * Specify price for order  When placing a limit order, the price must be based on priceIncrement for the trading pair. The price increment (priceIncrement) is the price precision for the trading pair. For example, for the BTC-USDT trading pair, the priceIncrement is 0.00001000. So the price for your orders cannot be less than 0.00001000 and must be a multiple of priceIncrement. Otherwise, the order will return an invalid priceIncrement error.
     */
    price?: string;
    /**
     * Specify quantity for order  When **type** is limit, size refers to the amount of trading targets (the asset name written in front) for the trading pair. Teh Size must be based on the baseIncrement of the trading pair. The baseIncrement represents the precision for the trading pair. The size of an order must be a positive-integer multiple of baseIncrement and must be between baseMinSize and baseMaxSize.  When **type** is market, select one out of two: size or funds
     */
    size?: string;
    /**
     * [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading
     */
    timeInForce?: AddOrderV1Req.TimeInForceEnum = AddOrderV1Req.TimeInForceEnum.GTC;
    /**
     * passive order labels, this is disabled when the order timing strategy is IOC or FOK
     */
    postOnly?: boolean = false;
    /**
     * Hidden or not (not shown in order book)
     */
    hidden?: boolean = false;
    /**
     * Whether or not only visible portions of orders are shown in iceberg orders
     */
    iceberg?: boolean = false;
    /**
     * Maximum visible quantity in iceberg orders
     */
    visibleSize?: string;
    /**
     * Cancel after n seconds，the order timing strategy is GTT
     */
    cancelAfter?: number;
    /**
     * When **type** is market, select one out of two: size or funds
     */
    funds?: string;
    /**
     * When Margin Account has inefficient balance, our system autoborrows inefficient assets and opens positions according to the lowest market interest rate.
     */
    autoBorrow?: boolean = false;
    /**
     * AutoPay allows returning borrowed assets when you close a position. Our system automatically triggers the repayment and the maximum repayment amount equals to the filled-order amount.
     */
    autoRepay?: boolean = false;
    /**
     * The type of trading, including cross (cross mode) and isolated (isolated mode). It is set at cross by default.
     */
    marginModel?: AddOrderV1Req.MarginModelEnum = AddOrderV1Req.MarginModelEnum.CROSS;

    /**
     * Creates a new instance of the `AddOrderV1Req` class.
     * The builder pattern allows step-by-step construction of a `AddOrderV1Req` object.
     */
    static builder(): AddOrderV1ReqBuilder {
        return new AddOrderV1ReqBuilder();
    }

    /**
     * Creates a new instance of the `AddOrderV1Req` class with the given data.
     */
    static create(data: {
        /**
         * Client Order Id，The ClientOid field is a unique ID created by the user（we recommend using a UUID）, and can only contain numbers, letters, underscores （_）, and hyphens （-）. This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
         */
        clientOid?: string;
        /**
         * specify if the order is to \'buy\' or \'sell\'
         */
        side?: AddOrderV1Req.SideEnum;
        /**
         * symbol
         */
        symbol?: string;
        /**
         * specify if the order is an \'limit\' order or \'market\' order.   The type of order you specify when you place your order determines whether or not you need to request other parameters and also affects the execution of the matching engine.  When placing a limit order, you must specify a price and size. The system will try to match the order according to market price or a price better than market price. If the order cannot be immediately matched, it will stay in the order book until it is matched or the user cancels.  Unlike limit orders, the price for market orders fluctuates with market prices. When placing a market order, you do not need to specify a price, you only need to specify a quantity. Market orders are filled immediately and will not enter the order book. All market orders are takers and a taker fee will be charged.
         */
        type?: AddOrderV1Req.TypeEnum;
        /**
         * [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into four strategies: CN, CO, CB , and DC
         */
        stp?: AddOrderV1Req.StpEnum;
        /**
         * Specify price for order  When placing a limit order, the price must be based on priceIncrement for the trading pair. The price increment (priceIncrement) is the price precision for the trading pair. For example, for the BTC-USDT trading pair, the priceIncrement is 0.00001000. So the price for your orders cannot be less than 0.00001000 and must be a multiple of priceIncrement. Otherwise, the order will return an invalid priceIncrement error.
         */
        price?: string;
        /**
         * Specify quantity for order  When **type** is limit, size refers to the amount of trading targets (the asset name written in front) for the trading pair. Teh Size must be based on the baseIncrement of the trading pair. The baseIncrement represents the precision for the trading pair. The size of an order must be a positive-integer multiple of baseIncrement and must be between baseMinSize and baseMaxSize.  When **type** is market, select one out of two: size or funds
         */
        size?: string;
        /**
         * [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading
         */
        timeInForce?: AddOrderV1Req.TimeInForceEnum;
        /**
         * passive order labels, this is disabled when the order timing strategy is IOC or FOK
         */
        postOnly?: boolean;
        /**
         * Hidden or not (not shown in order book)
         */
        hidden?: boolean;
        /**
         * Whether or not only visible portions of orders are shown in iceberg orders
         */
        iceberg?: boolean;
        /**
         * Maximum visible quantity in iceberg orders
         */
        visibleSize?: string;
        /**
         * Cancel after n seconds，the order timing strategy is GTT
         */
        cancelAfter?: number;
        /**
         * When **type** is market, select one out of two: size or funds
         */
        funds?: string;
        /**
         * When Margin Account has inefficient balance, our system autoborrows inefficient assets and opens positions according to the lowest market interest rate.
         */
        autoBorrow?: boolean;
        /**
         * AutoPay allows returning borrowed assets when you close a position. Our system automatically triggers the repayment and the maximum repayment amount equals to the filled-order amount.
         */
        autoRepay?: boolean;
        /**
         * The type of trading, including cross (cross mode) and isolated (isolated mode). It is set at cross by default.
         */
        marginModel?: AddOrderV1Req.MarginModelEnum;
    }): AddOrderV1Req {
        let obj = new AddOrderV1Req();
        obj.clientOid = data.clientOid;
        obj.side = data.side;
        obj.symbol = data.symbol;
        obj.type = data.type;
        obj.stp = data.stp;
        obj.price = data.price;
        obj.size = data.size;
        obj.timeInForce = data.timeInForce;
        obj.postOnly = data.postOnly;
        obj.hidden = data.hidden;
        obj.iceberg = data.iceberg;
        obj.visibleSize = data.visibleSize;
        obj.cancelAfter = data.cancelAfter;
        obj.funds = data.funds;
        obj.autoBorrow = data.autoBorrow;
        obj.autoRepay = data.autoRepay;
        obj.marginModel = data.marginModel;
        return obj;
    }

    fromJson(input: string): AddOrderV1Req {
        const jsonObject = JSON.parse(input);
        return plainToInstance(AddOrderV1Req, jsonObject);
    }

    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }

    fromObject(jsonObject: Object): AddOrderV1Req {
        return plainToInstance(AddOrderV1Req, jsonObject);
    }
}

export namespace AddOrderV1Req {
    export enum SideEnum {
        /**
         *
         */
        BUY = <any>'buy',
        /**
         *
         */
        SELL = <any>'sell',
    }
    export enum TypeEnum {
        /**
         *
         */
        LIMIT = <any>'limit',
        /**
         *
         */
        MARKET = <any>'market',
    }
    export enum StpEnum {
        /**
         *
         */
        DC = <any>'DC',
        /**
         *
         */
        CO = <any>'CO',
        /**
         *
         */
        CN = <any>'CN',
        /**
         *
         */
        CB = <any>'CB',
    }
    export enum TimeInForceEnum {
        /**
         *
         */
        GTC = <any>'GTC',
        /**
         *
         */
        GTT = <any>'GTT',
        /**
         *
         */
        IOC = <any>'IOC',
        /**
         *
         */
        FOK = <any>'FOK',
    }
    export enum MarginModelEnum {
        /**
         *
         */
        CROSS = <any>'cross',
        /**
         *
         */
        ISOLATED = <any>'isolated',
    }
}

export class AddOrderV1ReqBuilder {
    obj: AddOrderV1Req = new AddOrderV1Req();
    /**
     * Client Order Id，The ClientOid field is a unique ID created by the user（we recommend using a UUID）, and can only contain numbers, letters, underscores （_）, and hyphens （-）. This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
     */
    setClientOid(value: string): AddOrderV1ReqBuilder {
        this.obj.clientOid = value;
        return this;
    }

    /**
     * specify if the order is to \'buy\' or \'sell\'
     */
    setSide(value: AddOrderV1Req.SideEnum): AddOrderV1ReqBuilder {
        this.obj.side = value;
        return this;
    }

    /**
     * symbol
     */
    setSymbol(value: string): AddOrderV1ReqBuilder {
        this.obj.symbol = value;
        return this;
    }

    /**
     * specify if the order is an \'limit\' order or \'market\' order.   The type of order you specify when you place your order determines whether or not you need to request other parameters and also affects the execution of the matching engine.  When placing a limit order, you must specify a price and size. The system will try to match the order according to market price or a price better than market price. If the order cannot be immediately matched, it will stay in the order book until it is matched or the user cancels.  Unlike limit orders, the price for market orders fluctuates with market prices. When placing a market order, you do not need to specify a price, you only need to specify a quantity. Market orders are filled immediately and will not enter the order book. All market orders are takers and a taker fee will be charged.
     */
    setType(value: AddOrderV1Req.TypeEnum): AddOrderV1ReqBuilder {
        this.obj.type = value;
        return this;
    }

    /**
     * [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into four strategies: CN, CO, CB , and DC
     */
    setStp(value: AddOrderV1Req.StpEnum): AddOrderV1ReqBuilder {
        this.obj.stp = value;
        return this;
    }

    /**
     * Specify price for order  When placing a limit order, the price must be based on priceIncrement for the trading pair. The price increment (priceIncrement) is the price precision for the trading pair. For example, for the BTC-USDT trading pair, the priceIncrement is 0.00001000. So the price for your orders cannot be less than 0.00001000 and must be a multiple of priceIncrement. Otherwise, the order will return an invalid priceIncrement error.
     */
    setPrice(value: string): AddOrderV1ReqBuilder {
        this.obj.price = value;
        return this;
    }

    /**
     * Specify quantity for order  When **type** is limit, size refers to the amount of trading targets (the asset name written in front) for the trading pair. Teh Size must be based on the baseIncrement of the trading pair. The baseIncrement represents the precision for the trading pair. The size of an order must be a positive-integer multiple of baseIncrement and must be between baseMinSize and baseMaxSize.  When **type** is market, select one out of two: size or funds
     */
    setSize(value: string): AddOrderV1ReqBuilder {
        this.obj.size = value;
        return this;
    }

    /**
     * [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading
     */
    setTimeInForce(value: AddOrderV1Req.TimeInForceEnum): AddOrderV1ReqBuilder {
        this.obj.timeInForce = value;
        return this;
    }

    /**
     * passive order labels, this is disabled when the order timing strategy is IOC or FOK
     */
    setPostOnly(value: boolean): AddOrderV1ReqBuilder {
        this.obj.postOnly = value;
        return this;
    }

    /**
     * Hidden or not (not shown in order book)
     */
    setHidden(value: boolean): AddOrderV1ReqBuilder {
        this.obj.hidden = value;
        return this;
    }

    /**
     * Whether or not only visible portions of orders are shown in iceberg orders
     */
    setIceberg(value: boolean): AddOrderV1ReqBuilder {
        this.obj.iceberg = value;
        return this;
    }

    /**
     * Maximum visible quantity in iceberg orders
     */
    setVisibleSize(value: string): AddOrderV1ReqBuilder {
        this.obj.visibleSize = value;
        return this;
    }

    /**
     * Cancel after n seconds，the order timing strategy is GTT
     */
    setCancelAfter(value: number): AddOrderV1ReqBuilder {
        this.obj.cancelAfter = value;
        return this;
    }

    /**
     * When **type** is market, select one out of two: size or funds
     */
    setFunds(value: string): AddOrderV1ReqBuilder {
        this.obj.funds = value;
        return this;
    }

    /**
     * When Margin Account has inefficient balance, our system autoborrows inefficient assets and opens positions according to the lowest market interest rate.
     */
    setAutoBorrow(value: boolean): AddOrderV1ReqBuilder {
        this.obj.autoBorrow = value;
        return this;
    }

    /**
     * AutoPay allows returning borrowed assets when you close a position. Our system automatically triggers the repayment and the maximum repayment amount equals to the filled-order amount.
     */
    setAutoRepay(value: boolean): AddOrderV1ReqBuilder {
        this.obj.autoRepay = value;
        return this;
    }

    /**
     * The type of trading, including cross (cross mode) and isolated (isolated mode). It is set at cross by default.
     */
    setMarginModel(value: AddOrderV1Req.MarginModelEnum): AddOrderV1ReqBuilder {
        this.obj.marginModel = value;
        return this;
    }

    build(): AddOrderV1Req {
        return this.obj;
    }
}
