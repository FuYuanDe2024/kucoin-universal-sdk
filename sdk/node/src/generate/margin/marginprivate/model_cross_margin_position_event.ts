// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { Type, instanceToPlain, Exclude, plainToInstance } from 'class-transformer';
import { CrossMarginPositionAssetListValue } from './model_cross_margin_position_asset_list_value';
import { WsMessage } from '@model/common';
import { WebSocketMessageCallback } from '@internal/interfaces/websocket';
import { Response } from '@internal/interfaces/response';

export class CrossMarginPositionEvent implements Response<CrossMarginPositionEvent, WsMessage> {
    /**
     * Debt ratio
     */
    debtRatio?: number;
    /**
     * Total asset in BTC (interest included)
     */
    totalAsset?: number;
    /**
     *
     */
    marginCoefficientTotalAsset?: string;
    /**
     * Total debt in BTC (interest included)
     */
    totalDebt?: string;
    /**
     * Asset list (interest included)
     */
    assetList?: { [key: string]: CrossMarginPositionAssetListValue };
    /**
     * Debt list (interest included)
     */
    debtList?: { [key: string]: string };
    /**
     *
     */
    timestamp?: number;
    /**
     * Event type, **Only applicable to \"debt.ratio\" subject**
     */
    type?: CrossMarginPositionEvent.TypeEnum;

    /**
     * common response
     */
    @Exclude()
    private commonResponse?: WsMessage;

    setCommonResponse(response: WsMessage): void {
        this.commonResponse = response;
    }

    fromJson(input: string): CrossMarginPositionEvent {
        const jsonObject = JSON.parse(input);
        return plainToInstance(CrossMarginPositionEvent, jsonObject);
    }

    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }

    fromObject(jsonObject: Object): CrossMarginPositionEvent {
        return plainToInstance(CrossMarginPositionEvent, jsonObject);
    }
}

export namespace CrossMarginPositionEvent {
    export enum TypeEnum {
        /**
         * When the debt ratio exceeds the liquidation threshold and the position is frozen, the system will push this event.
         */
        FROZEN_FL = <any>'FROZEN_FL',
        /**
         * When the liquidation is finished and the position returns to “EFFECTIVE” status, the system will push this event.
         */
        UNFROZEN_FL = <any>'UNFROZEN_FL',
        /**
         * When the auto-borrow renewing is complete and the position returns to “EFFECTIVE” status, the system will push this event.
         */
        FROZEN_RENEW = <any>'FROZEN_RENEW',
        /**
         * When the account reaches a negative balance, the system will push this event.
         */
        UNFROZEN_RENEW = <any>'UNFROZEN_RENEW',
        /**
         * When the account reaches a negative balance, the system will push this event.
         */
        LIABILITY = <any>'LIABILITY',
        /**
         * When all the liabilities is repaid and the position returns to “EFFECTIVE” status, the system will push this event.
         */
        UNLIABILITY = <any>'UNLIABILITY',
    }
}

export type CrossMarginPositionEventCallback = (
    topic: string,
    subject: string,
    data: CrossMarginPositionEvent,
) => void;

export class CrossMarginPositionEventCallbackWrapper implements WebSocketMessageCallback {
    constructor(private callback: CrossMarginPositionEventCallback) {
        this.callback = callback;
    }

    onMessage(msg: WsMessage): void {
        let event = new CrossMarginPositionEvent().fromObject(msg.rawData);
        event.setCommonResponse(msg);
        this.callback(msg.topic, msg.subject, event);
    }
}
