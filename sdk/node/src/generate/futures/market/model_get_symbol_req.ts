// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToInstance } from 'class-transformer';
import 'reflect-metadata';
import { Serializable } from '@internal/interfaces/serializable';
export class GetSymbolReq implements Serializable<GetSymbolReq> {
    /**
     * Path Parameter. Symbol of the contract
     */
    @Reflect.metadata('path', 'symbol')
    symbol?: string;

    /**
     * Creates a new instance of the `GetSymbolReq` class.
     * The builder pattern allows step-by-step construction of a `GetSymbolReq` object.
     */
    static builder(): GetSymbolReqBuilder {
        return new GetSymbolReqBuilder();
    }

    /**
     * Creates a new instance of the `GetSymbolReq` class with the given data.
     */
    static create(data: {
        /**
         * Path Parameter. Symbol of the contract
         */
        symbol?: string;
    }): GetSymbolReq {
        let obj = new GetSymbolReq();
        obj.symbol = data.symbol;
        return obj;
    }

    fromJson(input: string): GetSymbolReq {
        const jsonObject = JSON.parse(input);
        return plainToInstance(GetSymbolReq, jsonObject);
    }

    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }

    fromObject(jsonObject: Object): GetSymbolReq {
        return plainToInstance(GetSymbolReq, jsonObject);
    }
}

export class GetSymbolReqBuilder {
    obj: GetSymbolReq = new GetSymbolReq();
    /**
     * Path Parameter. Symbol of the contract
     */
    setSymbol(value: string): GetSymbolReqBuilder {
        this.obj.symbol = value;
        return this;
    }

    build(): GetSymbolReq {
        return this.obj;
    }
}
