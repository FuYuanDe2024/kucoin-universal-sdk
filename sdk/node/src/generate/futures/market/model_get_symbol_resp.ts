// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, Exclude, plainToInstance } from 'class-transformer';
import { RestResponse } from '@model/common';
import { Response } from '@internal/interfaces/response';

export class GetSymbolResp implements Response<GetSymbolResp, RestResponse> {
    /**
     * Symbol
     */
    symbol?: string;
    /**
     * Contract group
     */
    rootSymbol?: string;
    /**
     * Type of the contract
     */
    type?: GetSymbolResp.TypeEnum;
    /**
     * First Open Date(millisecond)
     */
    firstOpenDate?: number;
    /**
     * Expiration date(millisecond). Null means it will never expire
     */
    expireDate?: number;
    /**
     * Settlement date(millisecond). Null indicates that automatic settlement is not supported
     */
    settleDate?: number;
    /**
     * Base currency
     */
    baseCurrency?: string;
    /**
     * Quote currency
     */
    quoteCurrency?: string;
    /**
     * Currency used to clear and settle the trades
     */
    settleCurrency?: string;
    /**
     * Maximum order quantity
     */
    maxOrderQty?: number;
    /**
     * Maximum order price
     */
    maxPrice?: number;
    /**
     * Minimum lot size
     */
    lotSize?: number;
    /**
     * Minimum price changes
     */
    tickSize?: number;
    /**
     * Index price of tick size
     */
    indexPriceTickSize?: number;
    /**
     * The basic unit of the contract API is lots. For the number of coins in each lot, please refer to the param multiplier. For example, for XBTUSDTM, multiplier=0.001, which corresponds to the value of each XBTUSDTM contract being 0.001 BTC. There is also a special case. All coin-swap contracts, such as each XBTUSDM contract, correspond to 1 USD.
     */
    multiplier?: number;
    /**
     * Initial margin requirement
     */
    initialMargin?: number;
    /**
     * Maintenance margin requirement
     */
    maintainMargin?: number;
    /**
     * Maximum risk limit (unit: XBT)
     */
    maxRiskLimit?: number;
    /**
     * Minimum risk limit (unit: XBT)
     */
    minRiskLimit?: number;
    /**
     * Risk limit increment value (unit: XBT)
     */
    riskStep?: number;
    /**
     * Maker fee rate
     */
    makerFeeRate?: number;
    /**
     * Taker fee rate
     */
    takerFeeRate?: number;
    /**
     * Deprecated param
     */
    takerFixFee?: number;
    /**
     * Deprecated param
     */
    makerFixFee?: number;
    /**
     * Settlement fee
     */
    settlementFee?: number;
    /**
     * Enabled ADL or not
     */
    isDeleverage?: boolean;
    /**
     * Deprecated param
     */
    isQuanto?: boolean;
    /**
     * Whether it is a reverse contract
     */
    isInverse?: boolean;
    /**
     * Marking method
     */
    markMethod?: GetSymbolResp.MarkMethodEnum;
    /**
     * Fair price marking method, The Futures contract is null
     */
    fairMethod?: GetSymbolResp.FairMethodEnum;
    /**
     * Ticker symbol of the based currency
     */
    fundingBaseSymbol?: string;
    /**
     * Ticker symbol of the quote currency
     */
    fundingQuoteSymbol?: string;
    /**
     * Funding rate symbol
     */
    fundingRateSymbol?: string;
    /**
     * Index symbol
     */
    indexSymbol?: string;
    /**
     * Settlement Symbol
     */
    settlementSymbol?: string;
    /**
     * Contract status
     */
    status?: GetSymbolResp.StatusEnum;
    /**
     * Funding fee rate
     */
    fundingFeeRate?: number;
    /**
     * Predicted funding fee rate
     */
    predictedFundingFeeRate?: number;
    /**
     * Funding interval(millisecond)
     */
    fundingRateGranularity?: number;
    /**
     * Open interest
     */
    openInterest?: string;
    /**
     * 24-hour turnover
     */
    turnoverOf24h?: number;
    /**
     * 24-hour volume
     */
    volumeOf24h?: number;
    /**
     * Mark price
     */
    markPrice?: number;
    /**
     * Index price
     */
    indexPrice?: number;
    /**
     * Last trade price
     */
    lastTradePrice?: number;
    /**
     * Next funding rate time(millisecond)
     */
    nextFundingRateTime?: number;
    /**
     * Maximum leverage
     */
    maxLeverage?: number;
    /**
     * The contract index price source exchange
     */
    sourceExchanges?: Array<string>;
    /**
     * Premium index symbol(1 minute)
     */
    premiumsSymbol1M?: string;
    /**
     * Premium index symbol(8 hours)
     */
    premiumsSymbol8H?: string;
    /**
     * Base currency interest rate symbol(1 minute)
     */
    fundingBaseSymbol1M?: string;
    /**
     * Quote currency interest rate symbol(1 minute)
     */
    fundingQuoteSymbol1M?: string;
    /**
     * 24-hour lowest price
     */
    lowPrice?: number;
    /**
     * 24-hour highest price
     */
    highPrice?: number;
    /**
     * 24-hour price change%
     */
    priceChgPct?: number;
    /**
     * 24-hour price change
     */
    priceChg?: number;
    /**
     *
     */
    k?: number;
    /**
     *
     */
    m?: number;
    /**
     *
     */
    f?: number;
    /**
     *
     */
    mmrLimit?: number;
    /**
     *
     */
    mmrLevConstant?: number;
    /**
     * Whether support Cross Margin
     */
    supportCross?: boolean;
    /**
     * common response
     */
    @Exclude()
    commonResponse?: RestResponse;

    setCommonResponse(response: RestResponse): void {
        this.commonResponse = response;
    }

    fromJson(input: string): GetSymbolResp {
        const jsonObject = JSON.parse(input);
        return plainToInstance(GetSymbolResp, jsonObject);
    }

    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }

    fromObject(jsonObject: Object): GetSymbolResp {
        return plainToInstance(GetSymbolResp, jsonObject);
    }
}

export namespace GetSymbolResp {
    export enum TypeEnum {
        /**
         * Standardized swap contracts standard financial futures on swap, expiration swap funding rate
         */
        FFWCSX = <any>'FFWCSX',
        /**
         * Futures Contract
         */
        FFICSX = <any>'FFICSX',
    }
    export enum MarkMethodEnum {
        /**
         * Fair Price
         */
        FAIRPRICE = <any>'FairPrice',
    }
    export enum FairMethodEnum {
        /**
         * FundingRate
         */
        FUNDINGRATE = <any>'FundingRate',
    }
    export enum StatusEnum {
        /**
         * Initial
         */
        INIT = <any>'Init',
        /**
         * Online
         */
        OPEN = <any>'Open',
        /**
         * Setting
         */
        BEINGSETTLED = <any>'BeingSettled',
        /**
         * Settled
         */
        SETTLED = <any>'Settled',
        /**
         * Suspended
         */
        PAUSED = <any>'Paused',
        /**
         * Offline
         */
        CLOSED = <any>'Closed',
        /**
         * Orders can only be canceled
         */
        CANCELONLY = <any>'CancelOnly',
    }
}
