// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToInstance } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class GetAllTickersData implements Serializable<GetAllTickersData> {
    /**
     * Sequence number, used to judge whether the messages pushed by Websocket is continuous.
     */
    sequence?: number;
    /**
     * Symbol
     */
    symbol?: string;
    /**
     * Trade direction
     */
    side?: GetAllTickersData.SideEnum;
    /**
     * Filled side, The trade side indicates the taker order side. A taker order is the order that was matched with orders opened on the order book.
     */
    size?: number;
    /**
     * Transaction ID
     */
    tradeId?: string;
    /**
     * Filled price
     */
    price?: string;
    /**
     * Best bid price
     */
    bestBidPrice?: string;
    /**
     * Best bid size
     */
    bestBidSize?: number;
    /**
     * Best ask price
     */
    bestAskPrice?: string;
    /**
     * Best ask size
     */
    bestAskSize?: number;
    /**
     * Filled time(nanosecond)
     */
    ts?: number;
    fromJson(input: string): GetAllTickersData {
        const jsonObject = JSON.parse(input);
        return plainToInstance(GetAllTickersData, jsonObject);
    }

    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }

    fromObject(jsonObject: Object): GetAllTickersData {
        return plainToInstance(GetAllTickersData, jsonObject);
    }
}

export namespace GetAllTickersData {
    export enum SideEnum {
        /**
         *
         */
        BUY = <any>'buy',
        /**
         *
         */
        SELL = <any>'sell',
    }
}
