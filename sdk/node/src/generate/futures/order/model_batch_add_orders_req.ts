// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { Type, instanceToPlain, plainToClassFromExist } from 'class-transformer';
import { BatchAddOrdersItem } from './model_batch_add_orders_item';
import { Serializable } from '@internal/interfaces/serializable';

export class BatchAddOrdersReq implements Serializable {
    /**
     *
     */
    @Type(() => BatchAddOrdersItem)
    items?: Array<BatchAddOrdersItem>;

    private constructor() {}
    /**
     * Creates a new instance of the `BatchAddOrdersReq` class.
     * The builder pattern allows step-by-step construction of a `BatchAddOrdersReq` object.
     */
    static builder(): BatchAddOrdersReqBuilder {
        return new BatchAddOrdersReqBuilder(new BatchAddOrdersReq());
    }

    /**
     * Creates a new instance of the `BatchAddOrdersReq` class with the given data.
     */
    static create(data: {
        /**
         *
         */
        items?: Array<BatchAddOrdersItem>;
    }): BatchAddOrdersReq {
        let obj = new BatchAddOrdersReq();
        obj.items = data.items;
        return obj;
    }

    toJson(): string {
        return JSON.stringify(instanceToPlain(this.items));
    }

    static fromJson(input: string): BatchAddOrdersReq {
        return this.fromObject(JSON.parse(input));
    }

    static fromObject(jsonObject: Object): BatchAddOrdersReq {
        return plainToClassFromExist(new BatchAddOrdersReq(), { items: jsonObject });
    }
}

export class BatchAddOrdersReqBuilder {
    constructor(readonly obj: BatchAddOrdersReq) {
        this.obj = obj;
    }
    /**
     *
     */
    setItems(value: Array<BatchAddOrdersItem>): BatchAddOrdersReqBuilder {
        this.obj.items = value;
        return this;
    }

    build(): BatchAddOrdersReq {
        return this.obj;
    }
}
