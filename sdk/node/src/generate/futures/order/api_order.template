
describe('Auto Test', ()=> {
    let api: OrderAPI;

    beforeAll(()=> {
        api = ??
    });
    test('getTradeHistory request test', ()=> {
    /**
    * getTradeHistory
    * Get Trade History
    * /api/v1/fills
    */
    let builder = GetTradeHistoryReq.builder();
    builder.setOrderId(?).setSymbol(?).setSide(?).setType(?).setTradeTypes(?).setStartAt(?).setEndAt(?).setCurrentPage(?).setPageSize(?);
    let req = builder.build();
    let resp = api.getTradeHistory(req);
    return resp.then(result => {
        expect(result.currentPage).toEqual(expect.anything());
        expect(result.pageSize).toEqual(expect.anything());
        expect(result.totalNum).toEqual(expect.anything());
        expect(result.totalPage).toEqual(expect.anything());
        expect(result.items).toEqual(expect.anything());
    });
    })

    test('GetOpenOrderValue request test', ()=> {
    /**
    * GetOpenOrderValue
    * Get Open Order Value
    * /api/v1/openOrderStatistics
    */
    let builder = GetOpenOrderValueReq.builder();
    builder.setSymbol(?);
    let req = builder.build();
    let resp = api.GetOpenOrderValue(req);
    return resp.then(result => {
        expect(result.openOrderBuySize).toEqual(expect.anything());
        expect(result.openOrderSellSize).toEqual(expect.anything());
        expect(result.openOrderBuyCost).toEqual(expect.anything());
        expect(result.openOrderSellCost).toEqual(expect.anything());
        expect(result.settleCurrency).toEqual(expect.anything());
    });
    })

    test('getOrderByClientOid request test', ()=> {
    /**
    * getOrderByClientOid
    * Get Order By ClientOid
    * /api/v1/orders/byClientOid
    */
    let builder = GetOrderByClientOidReq.builder();
    builder.setClientOid(?);
    let req = builder.build();
    let resp = api.getOrderByClientOid(req);
    return resp.then(result => {
        expect(result.id).toEqual(expect.anything());
        expect(result.symbol).toEqual(expect.anything());
        expect(result.type).toEqual(expect.anything());
        expect(result.side).toEqual(expect.anything());
        expect(result.price).toEqual(expect.anything());
        expect(result.size).toEqual(expect.anything());
        expect(result.value).toEqual(expect.anything());
        expect(result.dealValue).toEqual(expect.anything());
        expect(result.dealSize).toEqual(expect.anything());
        expect(result.stp).toEqual(expect.anything());
        expect(result.stop).toEqual(expect.anything());
        expect(result.stopPriceType).toEqual(expect.anything());
        expect(result.stopTriggered).toEqual(expect.anything());
        expect(result.stopPrice).toEqual(expect.anything());
        expect(result.timeInForce).toEqual(expect.anything());
        expect(result.postOnly).toEqual(expect.anything());
        expect(result.hidden).toEqual(expect.anything());
        expect(result.iceberg).toEqual(expect.anything());
        expect(result.leverage).toEqual(expect.anything());
        expect(result.forceHold).toEqual(expect.anything());
        expect(result.closeOrder).toEqual(expect.anything());
        expect(result.visibleSize).toEqual(expect.anything());
        expect(result.clientOid).toEqual(expect.anything());
        expect(result.remark).toEqual(expect.anything());
        expect(result.tags).toEqual(expect.anything());
        expect(result.isActive).toEqual(expect.anything());
        expect(result.cancelExist).toEqual(expect.anything());
        expect(result.createdAt).toEqual(expect.anything());
        expect(result.updatedAt).toEqual(expect.anything());
        expect(result.endAt).toEqual(expect.anything());
        expect(result.orderTime).toEqual(expect.anything());
        expect(result.settleCurrency).toEqual(expect.anything());
        expect(result.marginMode).toEqual(expect.anything());
        expect(result.avgDealPrice).toEqual(expect.anything());
        expect(result.filledSize).toEqual(expect.anything());
        expect(result.filledValue).toEqual(expect.anything());
        expect(result.status).toEqual(expect.anything());
        expect(result.reduceOnly).toEqual(expect.anything());
    });
    })

    test('cancelOrderByClientOid request test', ()=> {
    /**
    * cancelOrderByClientOid
    * Cancel Order By ClientOid
    * /api/v1/orders/client-order/{clientOid}
    */
    let builder = CancelOrderByClientOidReq.builder();
    builder.setSymbol(?).setClientOid(?);
    let req = builder.build();
    let resp = api.cancelOrderByClientOid(req);
    return resp.then(result => {
        expect(result.clientOid).toEqual(expect.anything());
    });
    })

    test('cancelAllOrdersV1 request test', ()=> {
    /**
    * cancelAllOrdersV1
    * Cancel All Orders - V1
    * /api/v1/orders
    */
    let builder = CancelAllOrdersV1Req.builder();
    builder.setSymbol(?);
    let req = builder.build();
    let resp = api.cancelAllOrdersV1(req);
    return resp.then(result => {
        expect(result.cancelledOrderIds).toEqual(expect.anything());
    });
    })

    test('GetOrderList request test', ()=> {
    /**
    * GetOrderList
    * Get Order List
    * /api/v1/orders
    */
    let builder = GetOrderListReq.builder();
    builder.setStatus(?).setSymbol(?).setSide(?).setType(?).setStartAt(?).setEndAt(?).setCurrentPage(?).setPageSize(?);
    let req = builder.build();
    let resp = api.GetOrderList(req);
    return resp.then(result => {
        expect(result.currentPage).toEqual(expect.anything());
        expect(result.pageSize).toEqual(expect.anything());
        expect(result.totalNum).toEqual(expect.anything());
        expect(result.totalPage).toEqual(expect.anything());
        expect(result.items).toEqual(expect.anything());
    });
    })

    test('batchCancelOrders request test', ()=> {
    /**
    * batchCancelOrders
    * Batch Cancel Orders
    * /api/v1/orders/multi-cancel
    */
    let builder = BatchCancelOrdersReq.builder();
    builder.setOrderIdsList(?).setClientOidsList(?);
    let req = builder.build();
    let resp = api.batchCancelOrders(req);
    return resp.then(result => {
        expect(result.data).toEqual(expect.anything());
    });
    })

    test('batchAddOrders request test', ()=> {
    /**
    * batchAddOrders
    * Batch Add Orders
    * /api/v1/orders/multi
    */
    let builder = BatchAddOrdersReq.builder();
    builder.setItems(?);
    let req = builder.build();
    let resp = api.batchAddOrders(req);
    return resp.then(result => {
        expect(result.data).toEqual(expect.anything());
    });
    })

    test('cancelOrderById request test', ()=> {
    /**
    * cancelOrderById
    * Cancel Order By OrderId
    * /api/v1/orders/{orderId}
    */
    let builder = CancelOrderByIdReq.builder();
    builder.setOrderId(?);
    let req = builder.build();
    let resp = api.cancelOrderById(req);
    return resp.then(result => {
        expect(result.cancelledOrderIds).toEqual(expect.anything());
    });
    })

    test('getOrderByOrderId request test', ()=> {
    /**
    * getOrderByOrderId
    * Get Order By OrderId
    * /api/v1/orders/{order-id}
    */
    let builder = GetOrderByOrderIdReq.builder();
    builder.setOrderId(?);
    let req = builder.build();
    let resp = api.getOrderByOrderId(req);
    return resp.then(result => {
        expect(result.id).toEqual(expect.anything());
        expect(result.symbol).toEqual(expect.anything());
        expect(result.type).toEqual(expect.anything());
        expect(result.side).toEqual(expect.anything());
        expect(result.price).toEqual(expect.anything());
        expect(result.size).toEqual(expect.anything());
        expect(result.value).toEqual(expect.anything());
        expect(result.dealValue).toEqual(expect.anything());
        expect(result.dealSize).toEqual(expect.anything());
        expect(result.stp).toEqual(expect.anything());
        expect(result.stop).toEqual(expect.anything());
        expect(result.stopPriceType).toEqual(expect.anything());
        expect(result.stopTriggered).toEqual(expect.anything());
        expect(result.stopPrice).toEqual(expect.anything());
        expect(result.timeInForce).toEqual(expect.anything());
        expect(result.postOnly).toEqual(expect.anything());
        expect(result.hidden).toEqual(expect.anything());
        expect(result.iceberg).toEqual(expect.anything());
        expect(result.leverage).toEqual(expect.anything());
        expect(result.forceHold).toEqual(expect.anything());
        expect(result.closeOrder).toEqual(expect.anything());
        expect(result.visibleSize).toEqual(expect.anything());
        expect(result.clientOid).toEqual(expect.anything());
        expect(result.remark).toEqual(expect.anything());
        expect(result.tags).toEqual(expect.anything());
        expect(result.isActive).toEqual(expect.anything());
        expect(result.cancelExist).toEqual(expect.anything());
        expect(result.createdAt).toEqual(expect.anything());
        expect(result.updatedAt).toEqual(expect.anything());
        expect(result.endAt).toEqual(expect.anything());
        expect(result.orderTime).toEqual(expect.anything());
        expect(result.settleCurrency).toEqual(expect.anything());
        expect(result.marginMode).toEqual(expect.anything());
        expect(result.avgDealPrice).toEqual(expect.anything());
        expect(result.filledSize).toEqual(expect.anything());
        expect(result.filledValue).toEqual(expect.anything());
        expect(result.status).toEqual(expect.anything());
        expect(result.reduceOnly).toEqual(expect.anything());
    });
    })

    test('addOrder request test', ()=> {
    /**
    * addOrder
    * Add Order
    * /api/v1/orders
    */
    let builder = AddOrderReq.builder();
    builder.setClientOid(?).setSide(?).setSymbol(?).setLeverage(?).setType(?).setRemark(?).setStop(?).setStopPriceType(?).setStopPrice(?).setReduceOnly(?).setCloseOrder(?).setForceHold(?).setStp(?).setMarginMode(?).setPrice(?).setSize(?).setTimeInForce(?).setPostOnly(?).setHidden(?).setIceberg(?).setVisibleSize(?).setQty(?).setValueQty(?);
    let req = builder.build();
    let resp = api.addOrder(req);
    return resp.then(result => {
        expect(result.orderId).toEqual(expect.anything());
        expect(result.clientOid).toEqual(expect.anything());
    });
    })

    test('addOrderTest request test', ()=> {
    /**
    * addOrderTest
    * Add Order Test
    * /api/v1/orders/test
    */
    let builder = AddOrderTestReq.builder();
    builder.setClientOid(?).setSide(?).setSymbol(?).setLeverage(?).setType(?).setRemark(?).setStop(?).setStopPriceType(?).setStopPrice(?).setReduceOnly(?).setCloseOrder(?).setForceHold(?).setStp(?).setMarginMode(?).setPrice(?).setSize(?).setTimeInForce(?).setPostOnly(?).setHidden(?).setIceberg(?).setVisibleSize(?).setQty(?).setValueQty(?);
    let req = builder.build();
    let resp = api.addOrderTest(req);
    return resp.then(result => {
        expect(result.orderId).toEqual(expect.anything());
        expect(result.clientOid).toEqual(expect.anything());
    });
    })

    test('GetRecentClosedOrders request test', ()=> {
    /**
    * GetRecentClosedOrders
    * Get Recent Closed Orders
    * /api/v1/recentDoneOrders
    */
    let builder = GetRecentClosedOrdersReq.builder();
    builder.setSymbol(?);
    let req = builder.build();
    let resp = api.GetRecentClosedOrders(req);
    return resp.then(result => {
        expect(result.data).toEqual(expect.anything());
    });
    })

    test('getRecentTradeHistory request test', ()=> {
    /**
    * getRecentTradeHistory
    * Get Recent Trade History
    * /api/v1/recentFills
    */
    let builder = GetRecentTradeHistoryReq.builder();
    builder.setSymbol(?);
    let req = builder.build();
    let resp = api.getRecentTradeHistory(req);
    return resp.then(result => {
        expect(result.data).toEqual(expect.anything());
    });
    })

    test('addTPSLOrder request test', ()=> {
    /**
    * addTPSLOrder
    * Add Take Profit And Stop Loss Order
    * /api/v1/st-orders
    */
    let builder = AddTPSLOrderReq.builder();
    builder.setClientOid(?).setSide(?).setSymbol(?).setLeverage(?).setType(?).setRemark(?).setStopPriceType(?).setReduceOnly(?).setCloseOrder(?).setForceHold(?).setStp(?).setMarginMode(?).setPrice(?).setSize(?).setTimeInForce(?).setPostOnly(?).setHidden(?).setIceberg(?).setVisibleSize(?).setTriggerStopUpPrice(?).setTriggerStopDownPrice(?).setQty(?).setValueQty(?);
    let req = builder.build();
    let resp = api.addTPSLOrder(req);
    return resp.then(result => {
        expect(result.orderId).toEqual(expect.anything());
        expect(result.clientOid).toEqual(expect.anything());
    });
    })

    test('cancelAllStopOrders request test', ()=> {
    /**
    * cancelAllStopOrders
    * Cancel All Stop orders
    * /api/v1/stopOrders
    */
    let builder = CancelAllStopOrdersReq.builder();
    builder.setSymbol(?);
    let req = builder.build();
    let resp = api.cancelAllStopOrders(req);
    return resp.then(result => {
        expect(result.cancelledOrderIds).toEqual(expect.anything());
    });
    })

    test('GetStopOrderList request test', ()=> {
    /**
    * GetStopOrderList
    * Get Stop Order List
    * /api/v1/stopOrders
    */
    let builder = GetStopOrderListReq.builder();
    builder.setSymbol(?).setSide(?).setType(?).setStartAt(?).setEndAt(?).setCurrentPage(?).setPageSize(?);
    let req = builder.build();
    let resp = api.GetStopOrderList(req);
    return resp.then(result => {
        expect(result.currentPage).toEqual(expect.anything());
        expect(result.pageSize).toEqual(expect.anything());
        expect(result.totalNum).toEqual(expect.anything());
        expect(result.totalPage).toEqual(expect.anything());
        expect(result.items).toEqual(expect.anything());
    });
    })

    test('cancelAllOrdersV3 request test', ()=> {
    /**
    * cancelAllOrdersV3
    * Cancel All Orders
    * /api/v3/orders
    */
    let builder = CancelAllOrdersV3Req.builder();
    builder.setSymbol(?);
    let req = builder.build();
    let resp = api.cancelAllOrdersV3(req);
    return resp.then(result => {
        expect(result.cancelledOrderIds).toEqual(expect.anything());
    });
    })

})