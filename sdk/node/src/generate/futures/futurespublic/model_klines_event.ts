// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, Exclude, plainToInstance } from 'class-transformer';
import { WsMessage } from '@model/common';
import { WebSocketMessageCallback } from '@internal/interfaces/websocket';
import { Response } from '@internal/interfaces/response';

export class KlinesEvent implements Response<KlinesEvent, WsMessage> {
    /**
     * Symbol of the contract, Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220)
     */
    symbol?: string;
    /**
     * Start time, open price, close price, high price, low price, Transaction volume(This value is incorrect, please do not use it, we will fix it in subsequent versions), Transaction amount
     */
    candles?: Array<string>;
    /**
     * timestamp(ms)
     */
    time?: number;
    /**
     * common response
     */
    @Exclude()
    private commonResponse?: WsMessage;

    setCommonResponse(response: WsMessage): void {
        this.commonResponse = response;
    }

    fromJson(input: string): KlinesEvent {
        const jsonObject = JSON.parse(input);
        return plainToInstance(KlinesEvent, jsonObject);
    }

    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }

    fromObject(jsonObject: Object): KlinesEvent {
        return plainToInstance(KlinesEvent, jsonObject);
    }
}

export type KlinesEventCallback = (topic: string, subject: string, data: KlinesEvent) => void;

export class KlinesEventCallbackWrapper implements WebSocketMessageCallback {
    callback: KlinesEventCallback;

    constructor(callback: KlinesEventCallback) {
        this.callback = callback;
    }

    onMessage(msg: WsMessage): void {
        let event = new KlinesEvent().fromObject(msg.rawData);
        event.setCommonResponse(msg);
        this.callback(msg.topic, msg.subject, event);
    }
}
