// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, Exclude, plainToInstance } from 'class-transformer';
import { WsMessage } from '@model/common';
import { WebSocketMessageCallback } from '@internal/interfaces/websocket';
import { Response } from '@internal/interfaces/response';

export class InstrumentEvent implements Response<InstrumentEvent, WsMessage> {
    /**
     * Granularity (predicted funding rate: 1-min granularity: 60000; Funding rate: 8-hours granularity: 28800000. )
     */
    granularity?: number;
    /**
     *
     */
    fundingRate?: number;
    /**
     *
     */
    timestamp?: number;
    /**
     *
     */
    markPrice?: number;
    /**
     *
     */
    indexPrice?: number;

    /**
     * common response
     */
    @Exclude()
    private commonResponse?: WsMessage;

    setCommonResponse(response: WsMessage): void {
        this.commonResponse = response;
    }

    fromJson(input: string): InstrumentEvent {
        const jsonObject = JSON.parse(input);
        return plainToInstance(InstrumentEvent, jsonObject);
    }

    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }

    fromObject(jsonObject: Object): InstrumentEvent {
        return plainToInstance(InstrumentEvent, jsonObject);
    }
}

export type InstrumentEventCallback = (
    topic: string,
    subject: string,
    data: InstrumentEvent,
) => void;

export class InstrumentEventCallbackWrapper implements WebSocketMessageCallback {
    constructor(private callback: InstrumentEventCallback) {
        this.callback = callback;
    }

    onMessage(msg: WsMessage): void {
        let event = new InstrumentEvent().fromObject(msg.rawData);
        event.setCommonResponse(msg);
        this.callback(msg.topic, msg.subject, event);
    }
}
