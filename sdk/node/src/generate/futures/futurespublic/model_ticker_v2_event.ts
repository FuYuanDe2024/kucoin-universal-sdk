// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, Exclude, plainToInstance } from 'class-transformer';
import { WsMessage } from '@model/common';
import { WebSocketMessageCallback } from '@internal/interfaces/websocket';
import { Response } from '@internal/interfaces/response';

export class TickerV2Event implements Response<TickerV2Event, WsMessage> {
    /**
     *
     */
    symbol?: string;
    /**
     *
     */
    sequence?: number;
    /**
     *
     */
    bestBidSize?: number;
    /**
     *
     */
    bestBidPrice?: string;
    /**
     *
     */
    bestAskPrice?: string;
    /**
     *
     */
    bestAskSize?: number;
    /**
     *
     */
    ts?: number;

    /**
     * common response
     */
    @Exclude()
    private commonResponse?: WsMessage;

    setCommonResponse(response: WsMessage): void {
        this.commonResponse = response;
    }

    fromJson(input: string): TickerV2Event {
        const jsonObject = JSON.parse(input);
        return plainToInstance(TickerV2Event, jsonObject);
    }

    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }

    fromObject(jsonObject: Object): TickerV2Event {
        return plainToInstance(TickerV2Event, jsonObject);
    }
}

export type TickerV2EventCallback = (topic: string, subject: string, data: TickerV2Event) => void;

export class TickerV2EventCallbackWrapper implements WebSocketMessageCallback {
    constructor(private callback: TickerV2EventCallback) {
        this.callback = callback;
    }

    onMessage(msg: WsMessage): void {
        let event = new TickerV2Event().fromObject(msg.rawData);
        event.setCommonResponse(msg);
        this.callback(msg.topic, msg.subject, event);
    }
}
