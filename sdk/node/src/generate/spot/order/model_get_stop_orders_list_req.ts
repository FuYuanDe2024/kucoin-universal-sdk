// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToInstance } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';
export class GetStopOrdersListReq implements Serializable<GetStopOrdersListReq> {
    /**
     * Only list orders for a specific symbol
     */
    symbol?: string;
    /**
     * buy or sell
     */
    side?: GetStopOrdersListReq.SideEnum;
    /**
     * limit, market, limit_stop or market_stop
     */
    type?: GetStopOrdersListReq.TypeEnum;
    /**
     * The type of trading : TRADE（Spot）, MARGIN_TRADE (Cross Margin), MARGIN_ISOLATED_TRADE (Isolated Margin). Default is TRADE
     */
    tradeType?: GetStopOrdersListReq.TradeTypeEnum;
    /**
     * Start time (milisecond)
     */
    startAt?: number;
    /**
     * End time (milisecond)
     */
    endAt?: number;
    /**
     * current page
     */
    currentPage?: number;
    /**
     * comma seperated order ID list
     */
    orderIds?: string;
    /**
     * page size
     */
    pageSize?: number;
    /**
     * Order type: stop: stop loss order, oco: oco order
     */
    stop?: string;

    /**
     * Creates a new instance of the `GetStopOrdersListReq` class.
     * The builder pattern allows step-by-step construction of a `GetStopOrdersListReq` object.
     */
    static builder(): GetStopOrdersListReqBuilder {
        return new GetStopOrdersListReqBuilder();
    }

    /**
     * Creates a new instance of the `GetStopOrdersListReq` class with the given data.
     */
    static create(data: {
        /**
         * Only list orders for a specific symbol
         */
        symbol?: string;
        /**
         * buy or sell
         */
        side?: GetStopOrdersListReq.SideEnum;
        /**
         * limit, market, limit_stop or market_stop
         */
        type?: GetStopOrdersListReq.TypeEnum;
        /**
         * The type of trading : TRADE（Spot）, MARGIN_TRADE (Cross Margin), MARGIN_ISOLATED_TRADE (Isolated Margin). Default is TRADE
         */
        tradeType?: GetStopOrdersListReq.TradeTypeEnum;
        /**
         * Start time (milisecond)
         */
        startAt?: number;
        /**
         * End time (milisecond)
         */
        endAt?: number;
        /**
         * current page
         */
        currentPage?: number;
        /**
         * comma seperated order ID list
         */
        orderIds?: string;
        /**
         * page size
         */
        pageSize?: number;
        /**
         * Order type: stop: stop loss order, oco: oco order
         */
        stop?: string;
    }): GetStopOrdersListReq {
        let obj = new GetStopOrdersListReq();
        obj.symbol = data.symbol;
        obj.side = data.side;
        obj.type = data.type;
        obj.tradeType = data.tradeType;
        obj.startAt = data.startAt;
        obj.endAt = data.endAt;
        obj.currentPage = data.currentPage;
        obj.orderIds = data.orderIds;
        obj.pageSize = data.pageSize;
        obj.stop = data.stop;
        return obj;
    }

    fromJson(input: string): GetStopOrdersListReq {
        const jsonObject = JSON.parse(input);
        return plainToInstance(GetStopOrdersListReq, jsonObject);
    }

    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }

    fromObject(jsonObject: Object): GetStopOrdersListReq {
        return plainToInstance(GetStopOrdersListReq, jsonObject);
    }
}

export namespace GetStopOrdersListReq {
    export enum SideEnum {
        /**
         *
         */
        BUY = <any>'buy',
        /**
         *
         */
        SELL = <any>'sell',
    }
    export enum TypeEnum {
        /**
         *
         */
        LIMIT = <any>'limit',
        /**
         *
         */
        MARKET = <any>'market',
        /**
         *
         */
        LIMIT_STOP = <any>'limit_stop',
        /**
         *
         */
        MARKET_STOP = <any>'market_stop',
    }
    export enum TradeTypeEnum {
        /**
         *
         */
        TRADE = <any>'TRADE',
        /**
         *
         */
        MARGIN_TRADE = <any>'MARGIN_TRADE',
        /**
         *
         */
        MARGIN_ISOLATED_TRADE = <any>'MARGIN_ISOLATED_TRADE',
    }
}

export class GetStopOrdersListReqBuilder {
    obj: GetStopOrdersListReq = new GetStopOrdersListReq();
    /**
     * Only list orders for a specific symbol
     */
    setSymbol(value: string): GetStopOrdersListReqBuilder {
        this.obj.symbol = value;
        return this;
    }

    /**
     * buy or sell
     */
    setSide(value: GetStopOrdersListReq.SideEnum): GetStopOrdersListReqBuilder {
        this.obj.side = value;
        return this;
    }

    /**
     * limit, market, limit_stop or market_stop
     */
    setType(value: GetStopOrdersListReq.TypeEnum): GetStopOrdersListReqBuilder {
        this.obj.type = value;
        return this;
    }

    /**
     * The type of trading : TRADE（Spot）, MARGIN_TRADE (Cross Margin), MARGIN_ISOLATED_TRADE (Isolated Margin). Default is TRADE
     */
    setTradeType(value: GetStopOrdersListReq.TradeTypeEnum): GetStopOrdersListReqBuilder {
        this.obj.tradeType = value;
        return this;
    }

    /**
     * Start time (milisecond)
     */
    setStartAt(value: number): GetStopOrdersListReqBuilder {
        this.obj.startAt = value;
        return this;
    }

    /**
     * End time (milisecond)
     */
    setEndAt(value: number): GetStopOrdersListReqBuilder {
        this.obj.endAt = value;
        return this;
    }

    /**
     * current page
     */
    setCurrentPage(value: number): GetStopOrdersListReqBuilder {
        this.obj.currentPage = value;
        return this;
    }

    /**
     * comma seperated order ID list
     */
    setOrderIds(value: string): GetStopOrdersListReqBuilder {
        this.obj.orderIds = value;
        return this;
    }

    /**
     * page size
     */
    setPageSize(value: number): GetStopOrdersListReqBuilder {
        this.obj.pageSize = value;
        return this;
    }

    /**
     * Order type: stop: stop loss order, oco: oco order
     */
    setStop(value: string): GetStopOrdersListReqBuilder {
        this.obj.stop = value;
        return this;
    }

    build(): GetStopOrdersListReq {
        return this.obj;
    }
}
