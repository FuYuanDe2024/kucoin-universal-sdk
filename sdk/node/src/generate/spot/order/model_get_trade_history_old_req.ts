// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToInstance } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class GetTradeHistoryOldReq implements Serializable<GetTradeHistoryOldReq> {
    /**
     * symbol
     */
    symbol?: string;
    /**
     * The unique order id generated by the trading system (If orderId is specified，please ignore the other query parameters)
     */
    orderId?: string;
    /**
     * specify if the order is to \'buy\' or \'sell\'
     */
    side?: GetTradeHistoryOldReq.SideEnum;
    /**
     * limit, market, limit_stop or market_stop
     */
    type?: GetTradeHistoryOldReq.TypeEnum;
    /**
     * The type of trading:TRADE - Spot Trading(TRADE as default), MARGIN_TRADE - Cross Margin Trading, MARGIN_ISOLATED_TRADE - Isolated Margin Trading.
     */
    tradeType?: GetTradeHistoryOldReq.TradeTypeEnum = GetTradeHistoryOldReq.TradeTypeEnum.TRADE;
    /**
     * Start time (milisecond)
     */
    startAt?: number;
    /**
     * End time (milisecond)
     */
    endAt?: number;
    /**
     * Current request page.
     */
    currentPage?: number = 1;
    /**
     * Number of results per request. Minimum is 10, maximum is 500.
     */
    pageSize?: number;

    /**
     * Creates a new instance of the `GetTradeHistoryOldReq` class.
     * The builder pattern allows step-by-step construction of a `GetTradeHistoryOldReq` object.
     */
    static builder(): GetTradeHistoryOldReqBuilder {
        return new GetTradeHistoryOldReqBuilder();
    }

    /**
     * Creates a new instance of the `GetTradeHistoryOldReq` class with the given data.
     */
    static create(data: {
        /**
         * symbol
         */
        symbol?: string;
        /**
         * The unique order id generated by the trading system (If orderId is specified，please ignore the other query parameters)
         */
        orderId?: string;
        /**
         * specify if the order is to \'buy\' or \'sell\'
         */
        side?: GetTradeHistoryOldReq.SideEnum;
        /**
         * limit, market, limit_stop or market_stop
         */
        type?: GetTradeHistoryOldReq.TypeEnum;
        /**
         * The type of trading:TRADE - Spot Trading(TRADE as default), MARGIN_TRADE - Cross Margin Trading, MARGIN_ISOLATED_TRADE - Isolated Margin Trading.
         */
        tradeType?: GetTradeHistoryOldReq.TradeTypeEnum;
        /**
         * Start time (milisecond)
         */
        startAt?: number;
        /**
         * End time (milisecond)
         */
        endAt?: number;
        /**
         * Current request page.
         */
        currentPage?: number;
        /**
         * Number of results per request. Minimum is 10, maximum is 500.
         */
        pageSize?: number;
    }): GetTradeHistoryOldReq {
        let obj = new GetTradeHistoryOldReq();
        obj.symbol = data.symbol;
        obj.orderId = data.orderId;
        obj.side = data.side;
        obj.type = data.type;
        obj.tradeType = data.tradeType;
        obj.startAt = data.startAt;
        obj.endAt = data.endAt;
        obj.currentPage = data.currentPage;
        obj.pageSize = data.pageSize;
        return obj;
    }

    fromJson(input: string): GetTradeHistoryOldReq {
        const jsonObject = JSON.parse(input);
        return plainToInstance(GetTradeHistoryOldReq, jsonObject);
    }

    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }

    fromObject(jsonObject: Object): GetTradeHistoryOldReq {
        return plainToInstance(GetTradeHistoryOldReq, jsonObject);
    }
}

export namespace GetTradeHistoryOldReq {
    export enum SideEnum {
        /**
         * buy
         */
        BUY = <any>'buy',
        /**
         * sell
         */
        SELL = <any>'sell',
    }
    export enum TypeEnum {
        /**
         * limit
         */
        LIMIT = <any>'limit',
        /**
         * market
         */
        MARKET = <any>'market',
        /**
         * limit_stop
         */
        LIMIT_STOP = <any>'limit_stop',
        /**
         * market_stop
         */
        MARKET_STOP = <any>'market_stop',
    }
    export enum TradeTypeEnum {
        /**
         * Spot Trading
         */
        TRADE = <any>'TRADE',
        /**
         * Cross Margin Trading
         */
        MARGIN_TRADE = <any>'MARGIN_TRADE',
        /**
         * Isolated Margin Trading
         */
        MARGIN_ISOLATED_TRADE = <any>'MARGIN_ISOLATED_TRADE',
    }
}

export class GetTradeHistoryOldReqBuilder {
    obj: GetTradeHistoryOldReq = new GetTradeHistoryOldReq();
    /**
     * symbol
     */
    setSymbol(value: string): GetTradeHistoryOldReqBuilder {
        this.obj.symbol = value;
        return this;
    }

    /**
     * The unique order id generated by the trading system (If orderId is specified，please ignore the other query parameters)
     */
    setOrderId(value: string): GetTradeHistoryOldReqBuilder {
        this.obj.orderId = value;
        return this;
    }

    /**
     * specify if the order is to \'buy\' or \'sell\'
     */
    setSide(value: GetTradeHistoryOldReq.SideEnum): GetTradeHistoryOldReqBuilder {
        this.obj.side = value;
        return this;
    }

    /**
     * limit, market, limit_stop or market_stop
     */
    setType(value: GetTradeHistoryOldReq.TypeEnum): GetTradeHistoryOldReqBuilder {
        this.obj.type = value;
        return this;
    }

    /**
     * The type of trading:TRADE - Spot Trading(TRADE as default), MARGIN_TRADE - Cross Margin Trading, MARGIN_ISOLATED_TRADE - Isolated Margin Trading.
     */
    setTradeType(value: GetTradeHistoryOldReq.TradeTypeEnum): GetTradeHistoryOldReqBuilder {
        this.obj.tradeType = value;
        return this;
    }

    /**
     * Start time (milisecond)
     */
    setStartAt(value: number): GetTradeHistoryOldReqBuilder {
        this.obj.startAt = value;
        return this;
    }

    /**
     * End time (milisecond)
     */
    setEndAt(value: number): GetTradeHistoryOldReqBuilder {
        this.obj.endAt = value;
        return this;
    }

    /**
     * Current request page.
     */
    setCurrentPage(value: number): GetTradeHistoryOldReqBuilder {
        this.obj.currentPage = value;
        return this;
    }

    /**
     * Number of results per request. Minimum is 10, maximum is 500.
     */
    setPageSize(value: number): GetTradeHistoryOldReqBuilder {
        this.obj.pageSize = value;
        return this;
    }

    build(): GetTradeHistoryOldReq {
        return this.obj;
    }
}
