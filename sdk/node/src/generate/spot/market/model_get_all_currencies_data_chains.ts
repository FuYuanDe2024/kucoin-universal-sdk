// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToInstance } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';
export class GetAllCurrenciesDataChains implements Serializable<GetAllCurrenciesDataChains> {
    /**
     * chain name of currency
     */
    chainName?: string;
    /**
     * Minimum withdrawal amount
     */
    withdrawalMinSize?: string;
    /**
     * Minimum deposit amount
     */
    depositMinSize?: string;
    /**
     * withdraw fee rate
     */
    withdrawFeeRate?: string;
    /**
     * Minimum fees charged for withdrawal
     */
    withdrawalMinFee?: string;
    /**
     * Support withdrawal or not
     */
    isWithdrawEnabled?: boolean;
    /**
     * Support deposit or not
     */
    isDepositEnabled?: boolean;
    /**
     * Number of block confirmations
     */
    confirms?: number;
    /**
     * The number of blocks (confirmations) for advance on-chain verification
     */
    preConfirms?: number;
    /**
     * Contract address
     */
    contractAddress?: string;
    /**
     * Withdrawal precision bit, indicating the maximum supported length after the decimal point of the withdrawal amount
     */
    withdrawPrecision?: number;
    /**
     * Maximum amount of single withdrawal
     */
    maxWithdraw?: string;
    /**
     * Maximum amount of single deposit (only applicable to Lightning Network)
     */
    maxDeposit?: string;
    /**
     * whether memo/tag is needed
     */
    needTag?: boolean;
    /**
     * chain id of currency
     */
    chainId?: string;
    /**
     * deposit fee rate (some currencies have this param, the default is empty)
     */
    depositFeeRate?: string;
    /**
     * withdraw max fee(some currencies have this param, the default is empty)
     */
    withdrawMaxFee?: string;
    /**
     *
     */
    depositTierFee?: string;
    fromJson(input: string): GetAllCurrenciesDataChains {
        const jsonObject = JSON.parse(input);
        return plainToInstance(GetAllCurrenciesDataChains, jsonObject);
    }

    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }

    fromObject(jsonObject: Object): GetAllCurrenciesDataChains {
        return plainToInstance(GetAllCurrenciesDataChains, jsonObject);
    }
}
