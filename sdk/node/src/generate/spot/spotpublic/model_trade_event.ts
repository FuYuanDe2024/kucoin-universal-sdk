// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, Exclude, plainToClassFromExist } from 'class-transformer';
import { WsMessage } from '@model/common';
import { WebSocketMessageCallback } from '@internal/interfaces/websocket';
import { Response } from '@internal/interfaces/serializable';

export class TradeEvent implements Response<WsMessage> {
    /**
     *
     */
    makerOrderId: string;
    /**
     *
     */
    price: string;
    /**
     *
     */
    sequence: string;
    /**
     *
     */
    side: string;
    /**
     *
     */
    size: string;
    /**
     *
     */
    symbol: string;
    /**
     *
     */
    takerOrderId: string;
    /**
     *
     */
    time: string;
    /**
     *
     */
    tradeId: string;
    /**
     *
     */
    type: string;

    private constructor() {
        // @ts-ignore
        this.makerOrderId = null;
        // @ts-ignore
        this.price = null;
        // @ts-ignore
        this.sequence = null;
        // @ts-ignore
        this.side = null;
        // @ts-ignore
        this.size = null;
        // @ts-ignore
        this.symbol = null;
        // @ts-ignore
        this.takerOrderId = null;
        // @ts-ignore
        this.time = null;
        // @ts-ignore
        this.tradeId = null;
        // @ts-ignore
        this.type = null;
    }
    /**
     * common response
     */
    @Exclude()
    private commonResponse?: WsMessage;

    setCommonResponse(response: WsMessage): void {
        this.commonResponse = response;
    }

    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): TradeEvent {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): TradeEvent {
        return plainToClassFromExist(new TradeEvent(), jsonObject);
    }
}

export type TradeEventCallback = (topic: string, subject: string, data: TradeEvent) => void;

export class TradeEventCallbackWrapper implements WebSocketMessageCallback {
    constructor(private callback: TradeEventCallback) {
        this.callback = callback;
    }

    onMessage(msg: WsMessage): void {
        let event = TradeEvent.fromObject(msg.data);
        event.setCommonResponse(msg);
        this.callback(msg.topic, msg.subject, event);
    }
}
