// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToInstance } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class InnerTransferReq implements Serializable<InnerTransferReq> {
    /**
     * Unique order id created by users to identify their orders, e.g. UUID, with a maximum length of 128 bits
     */
    clientOid?: string;
    /**
     * currency
     */
    currency?: string;
    /**
     * Transfer amount, the amount is a positive integer multiple of the currency precision.
     */
    amount?: string;
    /**
     * Receiving Account Type: main, trade, margin, isolated, margin_v2, isolated_v2, contract
     */
    to?: InnerTransferReq.ToEnum;
    /**
     * Trading pair, required when the payment account type is isolated, e.g.: BTC-USDT
     */
    fromTag?: string;
    /**
     * Trading pair, required when the payment account type is isolated, e.g.: BTC-USDT
     */
    toTag?: string;
    /**
     * Payment Account Type: main, trade, margin, isolated, margin_v2, isolated_v2
     */
    from?: InnerTransferReq.FromEnum;

    /**
     * Creates a new instance of the `InnerTransferReq` class.
     * The builder pattern allows step-by-step construction of a `InnerTransferReq` object.
     */
    static builder(): InnerTransferReqBuilder {
        return new InnerTransferReqBuilder();
    }

    /**
     * Creates a new instance of the `InnerTransferReq` class with the given data.
     */
    static create(data: {
        /**
         * Unique order id created by users to identify their orders, e.g. UUID, with a maximum length of 128 bits
         */
        clientOid?: string;
        /**
         * currency
         */
        currency?: string;
        /**
         * Transfer amount, the amount is a positive integer multiple of the currency precision.
         */
        amount?: string;
        /**
         * Receiving Account Type: main, trade, margin, isolated, margin_v2, isolated_v2, contract
         */
        to?: InnerTransferReq.ToEnum;
        /**
         * Trading pair, required when the payment account type is isolated, e.g.: BTC-USDT
         */
        fromTag?: string;
        /**
         * Trading pair, required when the payment account type is isolated, e.g.: BTC-USDT
         */
        toTag?: string;
        /**
         * Payment Account Type: main, trade, margin, isolated, margin_v2, isolated_v2
         */
        from?: InnerTransferReq.FromEnum;
    }): InnerTransferReq {
        let obj = new InnerTransferReq();
        obj.clientOid = data.clientOid;
        obj.currency = data.currency;
        obj.amount = data.amount;
        obj.to = data.to;
        obj.fromTag = data.fromTag;
        obj.toTag = data.toTag;
        obj.from = data.from;
        return obj;
    }

    fromJson(input: string): InnerTransferReq {
        const jsonObject = JSON.parse(input);
        return plainToInstance(InnerTransferReq, jsonObject);
    }

    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }

    fromObject(jsonObject: Object): InnerTransferReq {
        return plainToInstance(InnerTransferReq, jsonObject);
    }
}

export namespace InnerTransferReq {
    export enum ToEnum {
        /**
         * Funding account
         */
        MAIN = <any>'main',
        /**
         * Spot account
         */
        TRADE = <any>'trade',
        /**
         * Cross margin account
         */
        MARGIN = <any>'margin',
        /**
         * Isolated margin account
         */
        ISOLATED = <any>'isolated',
        /**
         * Cross margin account
         */
        MARGIN_V2 = <any>'margin_v2',
        /**
         * Isolated margin account
         */
        ISOLATED_V2 = <any>'isolated_v2',
        /**
         * Option account
         */
        OPTION = <any>'option',
    }
    export enum FromEnum {
        /**
         * Funding account
         */
        MAIN = <any>'main',
        /**
         * Spot account
         */
        TRADE = <any>'trade',
        /**
         * Cross margin account
         */
        MARGIN = <any>'margin',
        /**
         * Isolated margin account
         */
        ISOLATED = <any>'isolated',
        /**
         * Cross margin account
         */
        MARGIN_V2 = <any>'margin_v2',
        /**
         * Isolated margin account
         */
        ISOLATED_V2 = <any>'isolated_v2',
        /**
         * Option account
         */
        OPTION = <any>'option',
    }
}

export class InnerTransferReqBuilder {
    obj: InnerTransferReq = new InnerTransferReq();
    /**
     * Unique order id created by users to identify their orders, e.g. UUID, with a maximum length of 128 bits
     */
    setClientOid(value: string): InnerTransferReqBuilder {
        this.obj.clientOid = value;
        return this;
    }

    /**
     * currency
     */
    setCurrency(value: string): InnerTransferReqBuilder {
        this.obj.currency = value;
        return this;
    }

    /**
     * Transfer amount, the amount is a positive integer multiple of the currency precision.
     */
    setAmount(value: string): InnerTransferReqBuilder {
        this.obj.amount = value;
        return this;
    }

    /**
     * Receiving Account Type: main, trade, margin, isolated, margin_v2, isolated_v2, contract
     */
    setTo(value: InnerTransferReq.ToEnum): InnerTransferReqBuilder {
        this.obj.to = value;
        return this;
    }

    /**
     * Trading pair, required when the payment account type is isolated, e.g.: BTC-USDT
     */
    setFromTag(value: string): InnerTransferReqBuilder {
        this.obj.fromTag = value;
        return this;
    }

    /**
     * Trading pair, required when the payment account type is isolated, e.g.: BTC-USDT
     */
    setToTag(value: string): InnerTransferReqBuilder {
        this.obj.toTag = value;
        return this;
    }

    /**
     * Payment Account Type: main, trade, margin, isolated, margin_v2, isolated_v2
     */
    setFrom(value: InnerTransferReq.FromEnum): InnerTransferReqBuilder {
        this.obj.from = value;
        return this;
    }

    build(): InnerTransferReq {
        return this.obj;
    }
}
