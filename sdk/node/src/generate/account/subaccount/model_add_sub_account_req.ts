// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToInstance } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class AddSubAccountReq implements Serializable<AddSubAccountReq> {
    /**
     * Password(7-24 characters, must contain letters and numbers, cannot only contain numbers or include special characters)
     */
    password?: string;
    /**
     * Remarks(1~24 characters)
     */
    remarks?: string;
    /**
     * Sub-account name(must contain 7-32 characters, at least one number and one letter. Cannot contain any spaces.)
     */
    subName?: string;
    /**
     * Permission (types include Spot, Futures, Margin permissions, which can be used alone or in combination).
     */
    access?: AddSubAccountReq.AccessEnum;

    /**
     * Creates a new instance of the `AddSubAccountReq` class.
     * The builder pattern allows step-by-step construction of a `AddSubAccountReq` object.
     */
    static builder(): AddSubAccountReqBuilder {
        return new AddSubAccountReqBuilder();
    }

    /**
     * Creates a new instance of the `AddSubAccountReq` class with the given data.
     */
    static create(data: {
        /**
         * Password(7-24 characters, must contain letters and numbers, cannot only contain numbers or include special characters)
         */
        password?: string;
        /**
         * Remarks(1~24 characters)
         */
        remarks?: string;
        /**
         * Sub-account name(must contain 7-32 characters, at least one number and one letter. Cannot contain any spaces.)
         */
        subName?: string;
        /**
         * Permission (types include Spot, Futures, Margin permissions, which can be used alone or in combination).
         */
        access?: AddSubAccountReq.AccessEnum;
    }): AddSubAccountReq {
        let obj = new AddSubAccountReq();
        obj.password = data.password;
        obj.remarks = data.remarks;
        obj.subName = data.subName;
        obj.access = data.access;
        return obj;
    }

    fromJson(input: string): AddSubAccountReq {
        const jsonObject = JSON.parse(input);
        return plainToInstance(AddSubAccountReq, jsonObject);
    }

    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }

    fromObject(jsonObject: Object): AddSubAccountReq {
        return plainToInstance(AddSubAccountReq, jsonObject);
    }
}

export namespace AddSubAccountReq {
    export enum AccessEnum {
        /**
         * Spot Account
         */
        SPOT = <any>'Spot',
        /**
         * Futures Account
         */
        FUTURES = <any>'Futures',
        /**
         * Margin Account
         */
        MARGIN = <any>'Margin',
    }
}

export class AddSubAccountReqBuilder {
    obj: AddSubAccountReq = new AddSubAccountReq();
    /**
     * Password(7-24 characters, must contain letters and numbers, cannot only contain numbers or include special characters)
     */
    setPassword(value: string): AddSubAccountReqBuilder {
        this.obj.password = value;
        return this;
    }

    /**
     * Remarks(1~24 characters)
     */
    setRemarks(value: string): AddSubAccountReqBuilder {
        this.obj.remarks = value;
        return this;
    }

    /**
     * Sub-account name(must contain 7-32 characters, at least one number and one letter. Cannot contain any spaces.)
     */
    setSubName(value: string): AddSubAccountReqBuilder {
        this.obj.subName = value;
        return this;
    }

    /**
     * Permission (types include Spot, Futures, Margin permissions, which can be used alone or in combination).
     */
    setAccess(value: AddSubAccountReq.AccessEnum): AddSubAccountReqBuilder {
        this.obj.access = value;
        return this;
    }

    build(): AddSubAccountReq {
        return this.obj;
    }
}
