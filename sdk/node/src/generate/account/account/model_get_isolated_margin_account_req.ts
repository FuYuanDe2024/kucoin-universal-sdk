// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToClassFromExist } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class GetIsolatedMarginAccountReq implements Serializable {
    /**
     * For isolated trading pairs, query all without passing
     */
    symbol?: string;

    /**
     * quote currency, currently only supports USDT, KCS, BTC, USDT as default
     */
    quoteCurrency?: GetIsolatedMarginAccountReq.QuoteCurrencyEnum =
        GetIsolatedMarginAccountReq.QuoteCurrencyEnum.USDT;

    /**
     * Query account type (default ISOLATED), ISOLATED- - only query low frequency isolated margin account, ISOLATED_V2-only query high frequency isolated margin account, ALL - consistent aggregate query with the web side
     */
    queryType?: GetIsolatedMarginAccountReq.QueryTypeEnum =
        GetIsolatedMarginAccountReq.QueryTypeEnum.ISOLATED;

    private constructor() {}
    /**
     * Creates a new instance of the `GetIsolatedMarginAccountReq` class.
     * The builder pattern allows step-by-step construction of a `GetIsolatedMarginAccountReq` object.
     */
    static builder(): GetIsolatedMarginAccountReqBuilder {
        return new GetIsolatedMarginAccountReqBuilder(new GetIsolatedMarginAccountReq());
    }

    /**
     * Creates a new instance of the `GetIsolatedMarginAccountReq` class with the given data.
     */
    static create(data: {
        /**
         * For isolated trading pairs, query all without passing
         */
        symbol?: string;
        /**
         * quote currency, currently only supports USDT, KCS, BTC, USDT as default
         */
        quoteCurrency?: GetIsolatedMarginAccountReq.QuoteCurrencyEnum;
        /**
         * Query account type (default ISOLATED), ISOLATED- - only query low frequency isolated margin account, ISOLATED_V2-only query high frequency isolated margin account, ALL - consistent aggregate query with the web side
         */
        queryType?: GetIsolatedMarginAccountReq.QueryTypeEnum;
    }): GetIsolatedMarginAccountReq {
        let obj = new GetIsolatedMarginAccountReq();
        obj.symbol = data.symbol;
        if (data.quoteCurrency) {
            obj.quoteCurrency = data.quoteCurrency;
        } else {
            obj.quoteCurrency = GetIsolatedMarginAccountReq.QuoteCurrencyEnum.USDT;
        }
        if (data.queryType) {
            obj.queryType = data.queryType;
        } else {
            obj.queryType = GetIsolatedMarginAccountReq.QueryTypeEnum.ISOLATED;
        }
        return obj;
    }

    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }

    static fromJson(input: string): GetIsolatedMarginAccountReq {
        return this.fromObject(JSON.parse(input));
    }

    static fromObject(jsonObject: Object): GetIsolatedMarginAccountReq {
        return plainToClassFromExist(new GetIsolatedMarginAccountReq(), jsonObject);
    }
}

export namespace GetIsolatedMarginAccountReq {
    export enum QuoteCurrencyEnum {
        /**
         *
         */
        USDT = <any>'USDT',
        /**
         *
         */
        KCS = <any>'KCS',
        /**
         *
         */
        BTC = <any>'BTC',
    }
    export enum QueryTypeEnum {
        /**
         *
         */
        ISOLATED = <any>'ISOLATED',
        /**
         *
         */
        ISOLATED_V2 = <any>'ISOLATED_V2',
        /**
         *
         */
        ALL = <any>'ALL',
    }
}

export class GetIsolatedMarginAccountReqBuilder {
    constructor(readonly obj: GetIsolatedMarginAccountReq) {
        this.obj = obj;
    }
    /**
     * For isolated trading pairs, query all without passing
     */
    setSymbol(value: string): GetIsolatedMarginAccountReqBuilder {
        this.obj.symbol = value;
        return this;
    }

    /**
     * quote currency, currently only supports USDT, KCS, BTC, USDT as default
     */
    setQuoteCurrency(
        value: GetIsolatedMarginAccountReq.QuoteCurrencyEnum,
    ): GetIsolatedMarginAccountReqBuilder {
        this.obj.quoteCurrency = value;
        return this;
    }

    /**
     * Query account type (default ISOLATED), ISOLATED- - only query low frequency isolated margin account, ISOLATED_V2-only query high frequency isolated margin account, ALL - consistent aggregate query with the web side
     */
    setQueryType(
        value: GetIsolatedMarginAccountReq.QueryTypeEnum,
    ): GetIsolatedMarginAccountReqBuilder {
        this.obj.queryType = value;
        return this;
    }

    build(): GetIsolatedMarginAccountReq {
        return this.obj;
    }
}
