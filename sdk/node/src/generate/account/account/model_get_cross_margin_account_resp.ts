// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { Type, instanceToPlain, Exclude, plainToClassFromExist } from 'class-transformer';
import { GetCrossMarginAccountAccounts } from './model_get_cross_margin_account_accounts';
import { RestResponse } from '@model/common';
import { Response } from '@internal/interfaces/serializable';

export class GetCrossMarginAccountResp implements Response<RestResponse> {
    /**
     * Total Assets in Quote Currency
     */
    totalAssetOfQuoteCurrency: string;

    /**
     * Total Liability in Quote Currency
     */
    totalLiabilityOfQuoteCurrency: string;

    /**
     * debt ratio
     */
    debtRatio: string;

    /**
     * Position status; EFFECTIVE-effective, BANKRUPTCY-bankruptcy liquidation, LIQUIDATION-closing, REPAY-repayment, BORROW borrowing
     */
    status: GetCrossMarginAccountResp.StatusEnum;

    /**
     * Margin account list
     */
    @Type(() => GetCrossMarginAccountAccounts)
    accounts: Array<GetCrossMarginAccountAccounts>;

    private constructor() {
        // @ts-ignore
        this.totalAssetOfQuoteCurrency = null;
        // @ts-ignore
        this.totalLiabilityOfQuoteCurrency = null;
        // @ts-ignore
        this.debtRatio = null;
        // @ts-ignore
        this.status = null;
        // @ts-ignore
        this.accounts = null;
    }
    /**
     * common response
     */
    @Exclude()
    commonResponse?: RestResponse;

    setCommonResponse(response: RestResponse): void {
        this.commonResponse = response;
    }

    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }

    static fromJson(input: string): GetCrossMarginAccountResp {
        return this.fromObject(JSON.parse(input));
    }

    static fromObject(jsonObject: Object): GetCrossMarginAccountResp {
        return plainToClassFromExist(new GetCrossMarginAccountResp(), jsonObject);
    }
}

export namespace GetCrossMarginAccountResp {
    export enum StatusEnum {
        /**
         * Effective
         */
        EFFECTIVE = <any>'EFFECTIVE',
        /**
         * Bankruptcy liquidation
         */
        BANKRUPTCY = <any>'BANKRUPTCY',
        /**
         * Closing
         */
        LIQUIDATION = <any>'LIQUIDATION',
        /**
         * Repayment
         */
        REPAY = <any>'REPAY',
        /**
         * Borrowing
         */
        BORROW = <any>'BORROW',
    }
}
