// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToInstance } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class GetCrossMarginAccountReq implements Serializable<GetCrossMarginAccountReq> {
    /**
     * quote currency, currently only supports USDT, KCS, BTC, USDT as default
     */
    quoteCurrency?: GetCrossMarginAccountReq.QuoteCurrencyEnum =
        GetCrossMarginAccountReq.QuoteCurrencyEnum.USDT;
    /**
     * Query account type (default MARGIN), MARGIN - only query low frequency cross margin account, MARGIN_V2-only query high frequency cross margin account, ALL - consistent aggregate query with the web side
     */
    queryType?: GetCrossMarginAccountReq.QueryTypeEnum =
        GetCrossMarginAccountReq.QueryTypeEnum.MARGIN;

    /**
     * Creates a new instance of the `GetCrossMarginAccountReq` class.
     * The builder pattern allows step-by-step construction of a `GetCrossMarginAccountReq` object.
     */
    static builder(): GetCrossMarginAccountReqBuilder {
        return new GetCrossMarginAccountReqBuilder();
    }

    /**
     * Creates a new instance of the `GetCrossMarginAccountReq` class with the given data.
     */
    static create(data: {
        /**
         * quote currency, currently only supports USDT, KCS, BTC, USDT as default
         */
        quoteCurrency?: GetCrossMarginAccountReq.QuoteCurrencyEnum;
        /**
         * Query account type (default MARGIN), MARGIN - only query low frequency cross margin account, MARGIN_V2-only query high frequency cross margin account, ALL - consistent aggregate query with the web side
         */
        queryType?: GetCrossMarginAccountReq.QueryTypeEnum;
    }): GetCrossMarginAccountReq {
        let obj = new GetCrossMarginAccountReq();
        obj.quoteCurrency = data.quoteCurrency;
        obj.queryType = data.queryType;
        return obj;
    }

    fromJson(input: string): GetCrossMarginAccountReq {
        const jsonObject = JSON.parse(input);
        return plainToInstance(GetCrossMarginAccountReq, jsonObject);
    }

    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }

    fromObject(jsonObject: Object): GetCrossMarginAccountReq {
        return plainToInstance(GetCrossMarginAccountReq, jsonObject);
    }
}

export namespace GetCrossMarginAccountReq {
    export enum QuoteCurrencyEnum {
        /**
         *
         */
        USDT = <any>'USDT',
        /**
         *
         */
        KCS = <any>'KCS',
        /**
         *
         */
        BTC = <any>'BTC',
    }
    export enum QueryTypeEnum {
        /**
         *
         */
        MARGIN = <any>'MARGIN',
        /**
         *
         */
        MARGIN_V2 = <any>'MARGIN_V2',
        /**
         *
         */
        ALL = <any>'ALL',
    }
}

export class GetCrossMarginAccountReqBuilder {
    obj: GetCrossMarginAccountReq = new GetCrossMarginAccountReq();
    /**
     * quote currency, currently only supports USDT, KCS, BTC, USDT as default
     */
    setQuoteCurrency(
        value: GetCrossMarginAccountReq.QuoteCurrencyEnum,
    ): GetCrossMarginAccountReqBuilder {
        this.obj.quoteCurrency = value;
        return this;
    }

    /**
     * Query account type (default MARGIN), MARGIN - only query low frequency cross margin account, MARGIN_V2-only query high frequency cross margin account, ALL - consistent aggregate query with the web side
     */
    setQueryType(value: GetCrossMarginAccountReq.QueryTypeEnum): GetCrossMarginAccountReqBuilder {
        this.obj.queryType = value;
        return this;
    }

    build(): GetCrossMarginAccountReq {
        return this.obj;
    }
}
