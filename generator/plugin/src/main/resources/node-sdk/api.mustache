{{>partial_header}}

import { Transport } from '@internal/interfaces/transport';
{{#imports}}
{{{.}}}
{{/imports}}

export interface {{classname}} {
{{#operations}}
    {{#operation}}
    /**{{#isDeprecated}}
    * @deprecated{{/isDeprecated}}
    * {{vendorExtensions.x-meta.method}} {{summary}}
    * Description: {{notes}}
    * Documentation: {{vendorExtensions.x-api-doc}}
    {{#vendorExtensions.x-extra-comment}}
    * {{.}}
    {{/vendorExtensions.x-extra-comment}}
    */
    {{vendorExtensions.x-meta.method}}({{#hasParams}}req :{{vendorExtensions.x-meta.methodServiceFmt}}Req{{/hasParams}}): Promise<{{vendorExtensions.x-meta.methodServiceFmt}}Resp>

    {{/operation}}
{{/operations}}
}


export class {{classname}}Impl implements {{classname}} {
    constructor(private transport :Transport) {}

{{#operations}}
    {{#operation}}
    {{vendorExtensions.x-meta.method}}({{#hasParams}}req :{{vendorExtensions.x-meta.methodServiceFmt}}Req{{/hasParams}}): Promise<{{vendorExtensions.x-meta.methodServiceFmt}}Resp> {
        return this.transport.call("{{vendorExtensions.x-meta.domain}}", {{vendorExtensions.x-meta.broker}}, "{{httpMethod}}", "{{path}}", {{#hasParams}}req{{/hasParams}}{{^hasParams}}null{{/hasParams}}, new {{vendorExtensions.x-meta.methodServiceFmt}}Resp(), {{#vendorExtensions.x-request-force-json}}true{{/vendorExtensions.x-request-force-json}}{{^vendorExtensions.x-request-force-json}}false{{/vendorExtensions.x-request-force-json}})
    }

    {{/operation}}
{{/operations}}
}