{{>partial_header}}
{{#imports}}
{{{.}}}
{{/imports}}
import { WebSocketService } from '@internal/interfaces/websocket';

export interface {{classname}} {

{{#operations}}
    {{#operation}}

        /**
        * {{vendorExtensions.x-meta.method}} {{summary}}
        * {{notes}}
        * push frequency: {{vendorExtensions.x-push_frequency}}
        */
        {{vendorExtensions.x-meta.method}}{{operationName}}({{#vendorExtensions.x-meta.otherProperties}}{{#parameters}}{{#type}}{{#type.simple}}{{paras}} :string,{{/type.simple}}{{#type.array}}{{paras}} :Array<string>,{{/type.array}}{{#type.object}}{{#paras}}{{.}} string,{{/paras}}{{/type.object}}{{/type}}{{/parameters}}{{/vendorExtensions.x-meta.otherProperties}}callback :{{vendorExtensions.x-meta.methodServiceFmt}}EventCallback) :Promise<string>
    {{/operation}}

    /**
    * Unsubscribe from topics
    */
    unSubscribe(id :string) :Promise<void>

    /**
    * Start websocket
    */
    start() :Promise<void>

    /**
    * Stop websocket
    */
    stop() :Promise<void>
{{/operations}}
}

export class {{classname}}Impl implements {{classname}} {
    private wsService :WebSocketService;

    constructor(wsService: WebSocketService) {
        this.wsService = wsService;
    }

{{#operations}}
    {{#operation}}

    {{vendorExtensions.x-meta.method}}{{operationName}}({{#vendorExtensions.x-meta.otherProperties}}{{#parameters}}{{#type}}{{#type.simple}}{{paras}} :string,{{/type.simple}}{{#type.array}}{{paras}} :Array<string>,{{/type.array}}{{#type.object}}{{#paras}}{{.}} string,{{/paras}}{{/type.object}}{{/type}}{{/parameters}}{{/vendorExtensions.x-meta.otherProperties}}callback :{{vendorExtensions.x-meta.methodServiceFmt}}EventCallback) :Promise<string> {
    let topicPrefix = "{{vendorExtensions.x-meta.otherProperties.topic}}"
    {{#vendorExtensions.x-meta.otherProperties}}{{#parameters}}{{#type}}
        {{#type.none}}let args :string[] = []{{/type.none}}
        {{#type.simple}}let args:string[] = [ {{#paras}}{{.}}{{/paras}}] {{/type.simple}}
        {{#type.array}}let args:string[] = {{paras}}{{/type.array}}
        {{#type.object}}let args:string[] = [Array.join(([{{#paras}}{{.}},{{/paras}}], "_")]{{/type.object}}
    {{/type}}{{/parameters}}{{/vendorExtensions.x-meta.otherProperties}}
    return this.wsService.subscribe(topicPrefix,  args, new {{vendorExtensions.x-meta.methodServiceFmt}}EventCallbackWrapper(callback))
    }
    {{/operation}}
{{/operations}}

    unSubscribe(id :string) : Promise<void>{
        return this.wsService.unsubscribe(id)
    }

    start() : Promise<void>{
        return this.wsService.start()
    }

    stop() : Promise<void>{
    return this.wsService.stop()
    }

}